type AggregateBureau {
  count: Int!
}

type AggregateCategory {
  count: Int!
}

type AggregateContentField {
  count: Int!
}

type AggregateCountry {
  count: Int!
}

type AggregateDimensions {
  count: Int!
}

type AggregateDocumentConversionFormat {
  count: Int!
}

type AggregateDocumentFile {
  count: Int!
}

type AggregateDocumentUse {
  count: Int!
}

type AggregateGraphicProject {
  count: Int!
}

type AggregateGraphicStyle {
  count: Int!
}

type AggregateImageFile {
  count: Int!
}

type AggregateImageUse {
  count: Int!
}

type AggregateLanguage {
  count: Int!
}

type AggregateLanguageTranslation {
  count: Int!
}

type AggregateOffice {
  count: Int!
}

type AggregatePackage {
  count: Int!
}

type AggregatePlaybook {
  count: Int!
}

type AggregatePolicyPriority {
  count: Int!
}

type AggregateRegion {
  count: Int!
}

type AggregateSocialPlatform {
  count: Int!
}

type AggregateSupportFile {
  count: Int!
}

type AggregateSupportFileUse {
  count: Int!
}

type AggregateTag {
  count: Int!
}

type AggregateTeam {
  count: Int!
}

type AggregateThumbnail {
  count: Int!
}

type AggregateToolkit {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVideoFile {
  count: Int!
}

type AggregateVideoProject {
  count: Int!
}

type AggregateVideoStream {
  count: Int!
}

type AggregateVideoUnit {
  count: Int!
}

type AggregateVideoUse {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Bureau {
  id: ID!
  name: String!
  abbr: String!
  offices(where: OfficeWhereInput, orderBy: OfficeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Office!]
}

type BureauConnection {
  pageInfo: PageInfo!
  edges: [BureauEdge]!
  aggregate: AggregateBureau!
}

input BureauCreateInput {
  id: ID
  name: String!
  abbr: String!
  offices: OfficeCreateManyWithoutBureauInput
}

input BureauCreateManyInput {
  create: [BureauCreateInput!]
  connect: [BureauWhereUniqueInput!]
}

input BureauCreateOneWithoutOfficesInput {
  create: BureauCreateWithoutOfficesInput
  connect: BureauWhereUniqueInput
}

input BureauCreateWithoutOfficesInput {
  id: ID
  name: String!
  abbr: String!
}

type BureauEdge {
  node: Bureau!
  cursor: String!
}

enum BureauOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  abbr_ASC
  abbr_DESC
}

type BureauPreviousValues {
  id: ID!
  name: String!
  abbr: String!
}

input BureauScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  abbr: String
  abbr_not: String
  abbr_in: [String!]
  abbr_not_in: [String!]
  abbr_lt: String
  abbr_lte: String
  abbr_gt: String
  abbr_gte: String
  abbr_contains: String
  abbr_not_contains: String
  abbr_starts_with: String
  abbr_not_starts_with: String
  abbr_ends_with: String
  abbr_not_ends_with: String
  AND: [BureauScalarWhereInput!]
  OR: [BureauScalarWhereInput!]
  NOT: [BureauScalarWhereInput!]
}

type BureauSubscriptionPayload {
  mutation: MutationType!
  node: Bureau
  updatedFields: [String!]
  previousValues: BureauPreviousValues
}

input BureauSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BureauWhereInput
  AND: [BureauSubscriptionWhereInput!]
  OR: [BureauSubscriptionWhereInput!]
  NOT: [BureauSubscriptionWhereInput!]
}

input BureauUpdateDataInput {
  name: String
  abbr: String
  offices: OfficeUpdateManyWithoutBureauInput
}

input BureauUpdateInput {
  name: String
  abbr: String
  offices: OfficeUpdateManyWithoutBureauInput
}

input BureauUpdateManyDataInput {
  name: String
  abbr: String
}

input BureauUpdateManyInput {
  create: [BureauCreateInput!]
  update: [BureauUpdateWithWhereUniqueNestedInput!]
  upsert: [BureauUpsertWithWhereUniqueNestedInput!]
  delete: [BureauWhereUniqueInput!]
  connect: [BureauWhereUniqueInput!]
  set: [BureauWhereUniqueInput!]
  disconnect: [BureauWhereUniqueInput!]
  deleteMany: [BureauScalarWhereInput!]
  updateMany: [BureauUpdateManyWithWhereNestedInput!]
}

input BureauUpdateManyMutationInput {
  name: String
  abbr: String
}

input BureauUpdateManyWithWhereNestedInput {
  where: BureauScalarWhereInput!
  data: BureauUpdateManyDataInput!
}

input BureauUpdateOneWithoutOfficesInput {
  create: BureauCreateWithoutOfficesInput
  update: BureauUpdateWithoutOfficesDataInput
  upsert: BureauUpsertWithoutOfficesInput
  delete: Boolean
  disconnect: Boolean
  connect: BureauWhereUniqueInput
}

input BureauUpdateWithoutOfficesDataInput {
  name: String
  abbr: String
}

input BureauUpdateWithWhereUniqueNestedInput {
  where: BureauWhereUniqueInput!
  data: BureauUpdateDataInput!
}

input BureauUpsertWithoutOfficesInput {
  update: BureauUpdateWithoutOfficesDataInput!
  create: BureauCreateWithoutOfficesInput!
}

input BureauUpsertWithWhereUniqueNestedInput {
  where: BureauWhereUniqueInput!
  update: BureauUpdateDataInput!
  create: BureauCreateInput!
}

input BureauWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  abbr: String
  abbr_not: String
  abbr_in: [String!]
  abbr_not_in: [String!]
  abbr_lt: String
  abbr_lte: String
  abbr_gt: String
  abbr_gte: String
  abbr_contains: String
  abbr_not_contains: String
  abbr_starts_with: String
  abbr_not_starts_with: String
  abbr_ends_with: String
  abbr_not_ends_with: String
  offices_every: OfficeWhereInput
  offices_some: OfficeWhereInput
  offices_none: OfficeWhereInput
  AND: [BureauWhereInput!]
  OR: [BureauWhereInput!]
  NOT: [BureauWhereInput!]
}

input BureauWhereUniqueInput {
  id: ID
}

type Category {
  id: ID!
  translations(where: LanguageTranslationWhereInput, orderBy: LanguageTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LanguageTranslation!]
}

type CategoryConnection {
  pageInfo: PageInfo!
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  id: ID
  translations: LanguageTranslationCreateManyInput
}

input CategoryCreateManyInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

type CategoryEdge {
  node: Category!
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
}

type CategoryPreviousValues {
  id: ID!
}

input CategoryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [CategoryScalarWhereInput!]
  OR: [CategoryScalarWhereInput!]
  NOT: [CategoryScalarWhereInput!]
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
  AND: [CategorySubscriptionWhereInput!]
  OR: [CategorySubscriptionWhereInput!]
  NOT: [CategorySubscriptionWhereInput!]
}

input CategoryUpdateDataInput {
  translations: LanguageTranslationUpdateManyInput
}

input CategoryUpdateInput {
  translations: LanguageTranslationUpdateManyInput
}

input CategoryUpdateManyInput {
  create: [CategoryCreateInput!]
  update: [CategoryUpdateWithWhereUniqueNestedInput!]
  upsert: [CategoryUpsertWithWhereUniqueNestedInput!]
  delete: [CategoryWhereUniqueInput!]
  connect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  disconnect: [CategoryWhereUniqueInput!]
  deleteMany: [CategoryScalarWhereInput!]
}

input CategoryUpdateWithWhereUniqueNestedInput {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateDataInput!
}

input CategoryUpsertWithWhereUniqueNestedInput {
  where: CategoryWhereUniqueInput!
  update: CategoryUpdateDataInput!
  create: CategoryCreateInput!
}

input CategoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  translations_every: LanguageTranslationWhereInput
  translations_some: LanguageTranslationWhereInput
  translations_none: LanguageTranslationWhereInput
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
}

input CategoryWhereUniqueInput {
  id: ID
}

type ContentField {
  id: ID!
  type: String
  visibility: Visibility
  content: String
}

type ContentFieldConnection {
  pageInfo: PageInfo!
  edges: [ContentFieldEdge]!
  aggregate: AggregateContentField!
}

input ContentFieldCreateInput {
  id: ID
  type: String
  visibility: Visibility
  content: String
}

input ContentFieldCreateOneInput {
  create: ContentFieldCreateInput
  connect: ContentFieldWhereUniqueInput
}

type ContentFieldEdge {
  node: ContentField!
  cursor: String!
}

enum ContentFieldOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  visibility_ASC
  visibility_DESC
  content_ASC
  content_DESC
}

type ContentFieldPreviousValues {
  id: ID!
  type: String
  visibility: Visibility
  content: String
}

type ContentFieldSubscriptionPayload {
  mutation: MutationType!
  node: ContentField
  updatedFields: [String!]
  previousValues: ContentFieldPreviousValues
}

input ContentFieldSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ContentFieldWhereInput
  AND: [ContentFieldSubscriptionWhereInput!]
  OR: [ContentFieldSubscriptionWhereInput!]
  NOT: [ContentFieldSubscriptionWhereInput!]
}

input ContentFieldUpdateDataInput {
  type: String
  visibility: Visibility
  content: String
}

input ContentFieldUpdateInput {
  type: String
  visibility: Visibility
  content: String
}

input ContentFieldUpdateManyMutationInput {
  type: String
  visibility: Visibility
  content: String
}

input ContentFieldUpdateOneInput {
  create: ContentFieldCreateInput
  update: ContentFieldUpdateDataInput
  upsert: ContentFieldUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ContentFieldWhereUniqueInput
}

input ContentFieldUpsertNestedInput {
  update: ContentFieldUpdateDataInput!
  create: ContentFieldCreateInput!
}

input ContentFieldWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  visibility: Visibility
  visibility_not: Visibility
  visibility_in: [Visibility!]
  visibility_not_in: [Visibility!]
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [ContentFieldWhereInput!]
  OR: [ContentFieldWhereInput!]
  NOT: [ContentFieldWhereInput!]
}

input ContentFieldWhereUniqueInput {
  id: ID
}

enum ContentType {
  AUDIO
  VIDEO
  DOCUMENT
  GRAPHIC
  TEACHING_MATERIAL
  PACKAGE
  TOOLKIT
  PLAYBOOK
}

enum Copyright {
  COPYRIGHT
  NO_COPYRIGHT
}

type Country {
  id: ID!
  name: String!
  abbr: String!
  region: Region
}

type CountryConnection {
  pageInfo: PageInfo!
  edges: [CountryEdge]!
  aggregate: AggregateCountry!
}

input CountryCreateInput {
  id: ID
  name: String!
  abbr: String!
  region: RegionCreateOneWithoutCountriesInput
}

input CountryCreateManyInput {
  create: [CountryCreateInput!]
  connect: [CountryWhereUniqueInput!]
}

input CountryCreateManyWithoutRegionInput {
  create: [CountryCreateWithoutRegionInput!]
  connect: [CountryWhereUniqueInput!]
}

input CountryCreateWithoutRegionInput {
  id: ID
  name: String!
  abbr: String!
}

type CountryEdge {
  node: Country!
  cursor: String!
}

enum CountryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  abbr_ASC
  abbr_DESC
}

type CountryPreviousValues {
  id: ID!
  name: String!
  abbr: String!
}

input CountryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  abbr: String
  abbr_not: String
  abbr_in: [String!]
  abbr_not_in: [String!]
  abbr_lt: String
  abbr_lte: String
  abbr_gt: String
  abbr_gte: String
  abbr_contains: String
  abbr_not_contains: String
  abbr_starts_with: String
  abbr_not_starts_with: String
  abbr_ends_with: String
  abbr_not_ends_with: String
  AND: [CountryScalarWhereInput!]
  OR: [CountryScalarWhereInput!]
  NOT: [CountryScalarWhereInput!]
}

type CountrySubscriptionPayload {
  mutation: MutationType!
  node: Country
  updatedFields: [String!]
  previousValues: CountryPreviousValues
}

input CountrySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CountryWhereInput
  AND: [CountrySubscriptionWhereInput!]
  OR: [CountrySubscriptionWhereInput!]
  NOT: [CountrySubscriptionWhereInput!]
}

input CountryUpdateDataInput {
  name: String
  abbr: String
  region: RegionUpdateOneWithoutCountriesInput
}

input CountryUpdateInput {
  name: String
  abbr: String
  region: RegionUpdateOneWithoutCountriesInput
}

input CountryUpdateManyDataInput {
  name: String
  abbr: String
}

input CountryUpdateManyInput {
  create: [CountryCreateInput!]
  update: [CountryUpdateWithWhereUniqueNestedInput!]
  upsert: [CountryUpsertWithWhereUniqueNestedInput!]
  delete: [CountryWhereUniqueInput!]
  connect: [CountryWhereUniqueInput!]
  set: [CountryWhereUniqueInput!]
  disconnect: [CountryWhereUniqueInput!]
  deleteMany: [CountryScalarWhereInput!]
  updateMany: [CountryUpdateManyWithWhereNestedInput!]
}

input CountryUpdateManyMutationInput {
  name: String
  abbr: String
}

input CountryUpdateManyWithoutRegionInput {
  create: [CountryCreateWithoutRegionInput!]
  delete: [CountryWhereUniqueInput!]
  connect: [CountryWhereUniqueInput!]
  set: [CountryWhereUniqueInput!]
  disconnect: [CountryWhereUniqueInput!]
  update: [CountryUpdateWithWhereUniqueWithoutRegionInput!]
  upsert: [CountryUpsertWithWhereUniqueWithoutRegionInput!]
  deleteMany: [CountryScalarWhereInput!]
  updateMany: [CountryUpdateManyWithWhereNestedInput!]
}

input CountryUpdateManyWithWhereNestedInput {
  where: CountryScalarWhereInput!
  data: CountryUpdateManyDataInput!
}

input CountryUpdateWithoutRegionDataInput {
  name: String
  abbr: String
}

input CountryUpdateWithWhereUniqueNestedInput {
  where: CountryWhereUniqueInput!
  data: CountryUpdateDataInput!
}

input CountryUpdateWithWhereUniqueWithoutRegionInput {
  where: CountryWhereUniqueInput!
  data: CountryUpdateWithoutRegionDataInput!
}

input CountryUpsertWithWhereUniqueNestedInput {
  where: CountryWhereUniqueInput!
  update: CountryUpdateDataInput!
  create: CountryCreateInput!
}

input CountryUpsertWithWhereUniqueWithoutRegionInput {
  where: CountryWhereUniqueInput!
  update: CountryUpdateWithoutRegionDataInput!
  create: CountryCreateWithoutRegionInput!
}

input CountryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  abbr: String
  abbr_not: String
  abbr_in: [String!]
  abbr_not_in: [String!]
  abbr_lt: String
  abbr_lte: String
  abbr_gt: String
  abbr_gte: String
  abbr_contains: String
  abbr_not_contains: String
  abbr_starts_with: String
  abbr_not_starts_with: String
  abbr_ends_with: String
  abbr_not_ends_with: String
  region: RegionWhereInput
  AND: [CountryWhereInput!]
  OR: [CountryWhereInput!]
  NOT: [CountryWhereInput!]
}

input CountryWhereUniqueInput {
  id: ID
}

scalar DateTime

type Dimensions {
  id: ID!
  width: Int
  height: Int
}

type DimensionsConnection {
  pageInfo: PageInfo!
  edges: [DimensionsEdge]!
  aggregate: AggregateDimensions!
}

input DimensionsCreateInput {
  id: ID
  width: Int
  height: Int
}

input DimensionsCreateOneInput {
  create: DimensionsCreateInput
  connect: DimensionsWhereUniqueInput
}

type DimensionsEdge {
  node: Dimensions!
  cursor: String!
}

enum DimensionsOrderByInput {
  id_ASC
  id_DESC
  width_ASC
  width_DESC
  height_ASC
  height_DESC
}

type DimensionsPreviousValues {
  id: ID!
  width: Int
  height: Int
}

type DimensionsSubscriptionPayload {
  mutation: MutationType!
  node: Dimensions
  updatedFields: [String!]
  previousValues: DimensionsPreviousValues
}

input DimensionsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DimensionsWhereInput
  AND: [DimensionsSubscriptionWhereInput!]
  OR: [DimensionsSubscriptionWhereInput!]
  NOT: [DimensionsSubscriptionWhereInput!]
}

input DimensionsUpdateDataInput {
  width: Int
  height: Int
}

input DimensionsUpdateInput {
  width: Int
  height: Int
}

input DimensionsUpdateManyMutationInput {
  width: Int
  height: Int
}

input DimensionsUpdateOneInput {
  create: DimensionsCreateInput
  update: DimensionsUpdateDataInput
  upsert: DimensionsUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: DimensionsWhereUniqueInput
}

input DimensionsUpsertNestedInput {
  update: DimensionsUpdateDataInput!
  create: DimensionsCreateInput!
}

input DimensionsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  width: Int
  width_not: Int
  width_in: [Int!]
  width_not_in: [Int!]
  width_lt: Int
  width_lte: Int
  width_gt: Int
  width_gte: Int
  height: Int
  height_not: Int
  height_in: [Int!]
  height_not_in: [Int!]
  height_lt: Int
  height_lte: Int
  height_gt: Int
  height_gte: Int
  AND: [DimensionsWhereInput!]
  OR: [DimensionsWhereInput!]
  NOT: [DimensionsWhereInput!]
}

input DimensionsWhereUniqueInput {
  id: ID
}

type DocumentConversionFormat {
  id: ID!
  rawText: String
  html: String
  markdown: String
}

type DocumentConversionFormatConnection {
  pageInfo: PageInfo!
  edges: [DocumentConversionFormatEdge]!
  aggregate: AggregateDocumentConversionFormat!
}

input DocumentConversionFormatCreateInput {
  id: ID
  rawText: String
  html: String
  markdown: String
}

input DocumentConversionFormatCreateOneInput {
  create: DocumentConversionFormatCreateInput
  connect: DocumentConversionFormatWhereUniqueInput
}

type DocumentConversionFormatEdge {
  node: DocumentConversionFormat!
  cursor: String!
}

enum DocumentConversionFormatOrderByInput {
  id_ASC
  id_DESC
  rawText_ASC
  rawText_DESC
  html_ASC
  html_DESC
  markdown_ASC
  markdown_DESC
}

type DocumentConversionFormatPreviousValues {
  id: ID!
  rawText: String
  html: String
  markdown: String
}

type DocumentConversionFormatSubscriptionPayload {
  mutation: MutationType!
  node: DocumentConversionFormat
  updatedFields: [String!]
  previousValues: DocumentConversionFormatPreviousValues
}

input DocumentConversionFormatSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DocumentConversionFormatWhereInput
  AND: [DocumentConversionFormatSubscriptionWhereInput!]
  OR: [DocumentConversionFormatSubscriptionWhereInput!]
  NOT: [DocumentConversionFormatSubscriptionWhereInput!]
}

input DocumentConversionFormatUpdateDataInput {
  rawText: String
  html: String
  markdown: String
}

input DocumentConversionFormatUpdateInput {
  rawText: String
  html: String
  markdown: String
}

input DocumentConversionFormatUpdateManyMutationInput {
  rawText: String
  html: String
  markdown: String
}

input DocumentConversionFormatUpdateOneInput {
  create: DocumentConversionFormatCreateInput
  update: DocumentConversionFormatUpdateDataInput
  upsert: DocumentConversionFormatUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: DocumentConversionFormatWhereUniqueInput
}

input DocumentConversionFormatUpsertNestedInput {
  update: DocumentConversionFormatUpdateDataInput!
  create: DocumentConversionFormatCreateInput!
}

input DocumentConversionFormatWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  rawText: String
  rawText_not: String
  rawText_in: [String!]
  rawText_not_in: [String!]
  rawText_lt: String
  rawText_lte: String
  rawText_gt: String
  rawText_gte: String
  rawText_contains: String
  rawText_not_contains: String
  rawText_starts_with: String
  rawText_not_starts_with: String
  rawText_ends_with: String
  rawText_not_ends_with: String
  html: String
  html_not: String
  html_in: [String!]
  html_not_in: [String!]
  html_lt: String
  html_lte: String
  html_gt: String
  html_gte: String
  html_contains: String
  html_not_contains: String
  html_starts_with: String
  html_not_starts_with: String
  html_ends_with: String
  html_not_ends_with: String
  markdown: String
  markdown_not: String
  markdown_in: [String!]
  markdown_not_in: [String!]
  markdown_lt: String
  markdown_lte: String
  markdown_gt: String
  markdown_gte: String
  markdown_contains: String
  markdown_not_contains: String
  markdown_starts_with: String
  markdown_not_starts_with: String
  markdown_ends_with: String
  markdown_not_ends_with: String
  AND: [DocumentConversionFormatWhereInput!]
  OR: [DocumentConversionFormatWhereInput!]
  NOT: [DocumentConversionFormatWhereInput!]
}

input DocumentConversionFormatWhereUniqueInput {
  id: ID
}

type DocumentFile {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  title: String
  language: Language
  filetype: String
  filename: String
  filesize: Float
  status: PublishStatus
  excerpt: String
  content: DocumentConversionFormat
  image(where: ImageFileWhereInput, orderBy: ImageFileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ImageFile!]
  url: String
  signedUrl: String
  visibility: Visibility
  use: DocumentUse
  bureaus(where: BureauWhereInput, orderBy: BureauOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bureau!]
  countries(where: CountryWhereInput, orderBy: CountryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Country!]
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category!]
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
}

type DocumentFileConnection {
  pageInfo: PageInfo!
  edges: [DocumentFileEdge]!
  aggregate: AggregateDocumentFile!
}

input DocumentFileCreateInput {
  id: ID
  publishedAt: DateTime
  title: String
  language: LanguageCreateOneInput
  filetype: String
  filename: String
  filesize: Float
  status: PublishStatus
  excerpt: String
  content: DocumentConversionFormatCreateOneInput
  image: ImageFileCreateManyInput
  url: String
  signedUrl: String
  visibility: Visibility
  use: DocumentUseCreateOneInput
  bureaus: BureauCreateManyInput
  countries: CountryCreateManyInput
  categories: CategoryCreateManyInput
  tags: TagCreateManyInput
}

input DocumentFileCreateManyInput {
  create: [DocumentFileCreateInput!]
  connect: [DocumentFileWhereUniqueInput!]
}

type DocumentFileEdge {
  node: DocumentFile!
  cursor: String!
}

enum DocumentFileOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  title_ASC
  title_DESC
  filetype_ASC
  filetype_DESC
  filename_ASC
  filename_DESC
  filesize_ASC
  filesize_DESC
  status_ASC
  status_DESC
  excerpt_ASC
  excerpt_DESC
  url_ASC
  url_DESC
  signedUrl_ASC
  signedUrl_DESC
  visibility_ASC
  visibility_DESC
}

type DocumentFilePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  title: String
  filetype: String
  filename: String
  filesize: Float
  status: PublishStatus
  excerpt: String
  url: String
  signedUrl: String
  visibility: Visibility
}

input DocumentFileScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  filetype: String
  filetype_not: String
  filetype_in: [String!]
  filetype_not_in: [String!]
  filetype_lt: String
  filetype_lte: String
  filetype_gt: String
  filetype_gte: String
  filetype_contains: String
  filetype_not_contains: String
  filetype_starts_with: String
  filetype_not_starts_with: String
  filetype_ends_with: String
  filetype_not_ends_with: String
  filename: String
  filename_not: String
  filename_in: [String!]
  filename_not_in: [String!]
  filename_lt: String
  filename_lte: String
  filename_gt: String
  filename_gte: String
  filename_contains: String
  filename_not_contains: String
  filename_starts_with: String
  filename_not_starts_with: String
  filename_ends_with: String
  filename_not_ends_with: String
  filesize: Float
  filesize_not: Float
  filesize_in: [Float!]
  filesize_not_in: [Float!]
  filesize_lt: Float
  filesize_lte: Float
  filesize_gt: Float
  filesize_gte: Float
  status: PublishStatus
  status_not: PublishStatus
  status_in: [PublishStatus!]
  status_not_in: [PublishStatus!]
  excerpt: String
  excerpt_not: String
  excerpt_in: [String!]
  excerpt_not_in: [String!]
  excerpt_lt: String
  excerpt_lte: String
  excerpt_gt: String
  excerpt_gte: String
  excerpt_contains: String
  excerpt_not_contains: String
  excerpt_starts_with: String
  excerpt_not_starts_with: String
  excerpt_ends_with: String
  excerpt_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  signedUrl: String
  signedUrl_not: String
  signedUrl_in: [String!]
  signedUrl_not_in: [String!]
  signedUrl_lt: String
  signedUrl_lte: String
  signedUrl_gt: String
  signedUrl_gte: String
  signedUrl_contains: String
  signedUrl_not_contains: String
  signedUrl_starts_with: String
  signedUrl_not_starts_with: String
  signedUrl_ends_with: String
  signedUrl_not_ends_with: String
  visibility: Visibility
  visibility_not: Visibility
  visibility_in: [Visibility!]
  visibility_not_in: [Visibility!]
  AND: [DocumentFileScalarWhereInput!]
  OR: [DocumentFileScalarWhereInput!]
  NOT: [DocumentFileScalarWhereInput!]
}

type DocumentFileSubscriptionPayload {
  mutation: MutationType!
  node: DocumentFile
  updatedFields: [String!]
  previousValues: DocumentFilePreviousValues
}

input DocumentFileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DocumentFileWhereInput
  AND: [DocumentFileSubscriptionWhereInput!]
  OR: [DocumentFileSubscriptionWhereInput!]
  NOT: [DocumentFileSubscriptionWhereInput!]
}

input DocumentFileUpdateDataInput {
  publishedAt: DateTime
  title: String
  language: LanguageUpdateOneInput
  filetype: String
  filename: String
  filesize: Float
  status: PublishStatus
  excerpt: String
  content: DocumentConversionFormatUpdateOneInput
  image: ImageFileUpdateManyInput
  url: String
  signedUrl: String
  visibility: Visibility
  use: DocumentUseUpdateOneInput
  bureaus: BureauUpdateManyInput
  countries: CountryUpdateManyInput
  categories: CategoryUpdateManyInput
  tags: TagUpdateManyInput
}

input DocumentFileUpdateInput {
  publishedAt: DateTime
  title: String
  language: LanguageUpdateOneInput
  filetype: String
  filename: String
  filesize: Float
  status: PublishStatus
  excerpt: String
  content: DocumentConversionFormatUpdateOneInput
  image: ImageFileUpdateManyInput
  url: String
  signedUrl: String
  visibility: Visibility
  use: DocumentUseUpdateOneInput
  bureaus: BureauUpdateManyInput
  countries: CountryUpdateManyInput
  categories: CategoryUpdateManyInput
  tags: TagUpdateManyInput
}

input DocumentFileUpdateManyDataInput {
  publishedAt: DateTime
  title: String
  filetype: String
  filename: String
  filesize: Float
  status: PublishStatus
  excerpt: String
  url: String
  signedUrl: String
  visibility: Visibility
}

input DocumentFileUpdateManyInput {
  create: [DocumentFileCreateInput!]
  update: [DocumentFileUpdateWithWhereUniqueNestedInput!]
  upsert: [DocumentFileUpsertWithWhereUniqueNestedInput!]
  delete: [DocumentFileWhereUniqueInput!]
  connect: [DocumentFileWhereUniqueInput!]
  set: [DocumentFileWhereUniqueInput!]
  disconnect: [DocumentFileWhereUniqueInput!]
  deleteMany: [DocumentFileScalarWhereInput!]
  updateMany: [DocumentFileUpdateManyWithWhereNestedInput!]
}

input DocumentFileUpdateManyMutationInput {
  publishedAt: DateTime
  title: String
  filetype: String
  filename: String
  filesize: Float
  status: PublishStatus
  excerpt: String
  url: String
  signedUrl: String
  visibility: Visibility
}

input DocumentFileUpdateManyWithWhereNestedInput {
  where: DocumentFileScalarWhereInput!
  data: DocumentFileUpdateManyDataInput!
}

input DocumentFileUpdateWithWhereUniqueNestedInput {
  where: DocumentFileWhereUniqueInput!
  data: DocumentFileUpdateDataInput!
}

input DocumentFileUpsertWithWhereUniqueNestedInput {
  where: DocumentFileWhereUniqueInput!
  update: DocumentFileUpdateDataInput!
  create: DocumentFileCreateInput!
}

input DocumentFileWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  language: LanguageWhereInput
  filetype: String
  filetype_not: String
  filetype_in: [String!]
  filetype_not_in: [String!]
  filetype_lt: String
  filetype_lte: String
  filetype_gt: String
  filetype_gte: String
  filetype_contains: String
  filetype_not_contains: String
  filetype_starts_with: String
  filetype_not_starts_with: String
  filetype_ends_with: String
  filetype_not_ends_with: String
  filename: String
  filename_not: String
  filename_in: [String!]
  filename_not_in: [String!]
  filename_lt: String
  filename_lte: String
  filename_gt: String
  filename_gte: String
  filename_contains: String
  filename_not_contains: String
  filename_starts_with: String
  filename_not_starts_with: String
  filename_ends_with: String
  filename_not_ends_with: String
  filesize: Float
  filesize_not: Float
  filesize_in: [Float!]
  filesize_not_in: [Float!]
  filesize_lt: Float
  filesize_lte: Float
  filesize_gt: Float
  filesize_gte: Float
  status: PublishStatus
  status_not: PublishStatus
  status_in: [PublishStatus!]
  status_not_in: [PublishStatus!]
  excerpt: String
  excerpt_not: String
  excerpt_in: [String!]
  excerpt_not_in: [String!]
  excerpt_lt: String
  excerpt_lte: String
  excerpt_gt: String
  excerpt_gte: String
  excerpt_contains: String
  excerpt_not_contains: String
  excerpt_starts_with: String
  excerpt_not_starts_with: String
  excerpt_ends_with: String
  excerpt_not_ends_with: String
  content: DocumentConversionFormatWhereInput
  image_every: ImageFileWhereInput
  image_some: ImageFileWhereInput
  image_none: ImageFileWhereInput
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  signedUrl: String
  signedUrl_not: String
  signedUrl_in: [String!]
  signedUrl_not_in: [String!]
  signedUrl_lt: String
  signedUrl_lte: String
  signedUrl_gt: String
  signedUrl_gte: String
  signedUrl_contains: String
  signedUrl_not_contains: String
  signedUrl_starts_with: String
  signedUrl_not_starts_with: String
  signedUrl_ends_with: String
  signedUrl_not_ends_with: String
  visibility: Visibility
  visibility_not: Visibility
  visibility_in: [Visibility!]
  visibility_not_in: [Visibility!]
  use: DocumentUseWhereInput
  bureaus_every: BureauWhereInput
  bureaus_some: BureauWhereInput
  bureaus_none: BureauWhereInput
  countries_every: CountryWhereInput
  countries_some: CountryWhereInput
  countries_none: CountryWhereInput
  categories_every: CategoryWhereInput
  categories_some: CategoryWhereInput
  categories_none: CategoryWhereInput
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  AND: [DocumentFileWhereInput!]
  OR: [DocumentFileWhereInput!]
  NOT: [DocumentFileWhereInput!]
}

input DocumentFileWhereUniqueInput {
  id: ID
}

type DocumentUse {
  id: ID!
  name: String!
}

type DocumentUseConnection {
  pageInfo: PageInfo!
  edges: [DocumentUseEdge]!
  aggregate: AggregateDocumentUse!
}

input DocumentUseCreateInput {
  id: ID
  name: String!
}

input DocumentUseCreateOneInput {
  create: DocumentUseCreateInput
  connect: DocumentUseWhereUniqueInput
}

type DocumentUseEdge {
  node: DocumentUse!
  cursor: String!
}

enum DocumentUseOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type DocumentUsePreviousValues {
  id: ID!
  name: String!
}

type DocumentUseSubscriptionPayload {
  mutation: MutationType!
  node: DocumentUse
  updatedFields: [String!]
  previousValues: DocumentUsePreviousValues
}

input DocumentUseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DocumentUseWhereInput
  AND: [DocumentUseSubscriptionWhereInput!]
  OR: [DocumentUseSubscriptionWhereInput!]
  NOT: [DocumentUseSubscriptionWhereInput!]
}

input DocumentUseUpdateDataInput {
  name: String
}

input DocumentUseUpdateInput {
  name: String
}

input DocumentUseUpdateManyMutationInput {
  name: String
}

input DocumentUseUpdateOneInput {
  create: DocumentUseCreateInput
  update: DocumentUseUpdateDataInput
  upsert: DocumentUseUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: DocumentUseWhereUniqueInput
}

input DocumentUseUpsertNestedInput {
  update: DocumentUseUpdateDataInput!
  create: DocumentUseCreateInput!
}

input DocumentUseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [DocumentUseWhereInput!]
  OR: [DocumentUseWhereInput!]
  NOT: [DocumentUseWhereInput!]
}

input DocumentUseWhereUniqueInput {
  id: ID
  name: String
}

type GraphicProject {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  type: ProjectType!
  title: String!
  copyright: Copyright
  alt: String
  descPublic: ContentField
  descInternal: ContentField
  assetPath: String
  author: User
  team: Team
  status: PublishStatus
  visibility: Visibility
  supportFiles(where: SupportFileWhereInput, orderBy: SupportFileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SupportFile!]
  images(where: ImageFileWhereInput, orderBy: ImageFileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ImageFile!]
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category!]
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
}

type GraphicProjectConnection {
  pageInfo: PageInfo!
  edges: [GraphicProjectEdge]!
  aggregate: AggregateGraphicProject!
}

input GraphicProjectCreateInput {
  id: ID
  publishedAt: DateTime
  type: ProjectType
  title: String!
  copyright: Copyright
  alt: String
  descPublic: ContentFieldCreateOneInput
  descInternal: ContentFieldCreateOneInput
  assetPath: String
  author: UserCreateOneInput
  team: TeamCreateOneInput
  status: PublishStatus
  visibility: Visibility
  supportFiles: SupportFileCreateManyInput
  images: ImageFileCreateManyInput
  categories: CategoryCreateManyInput
  tags: TagCreateManyInput
}

type GraphicProjectEdge {
  node: GraphicProject!
  cursor: String!
}

enum GraphicProjectOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  type_ASC
  type_DESC
  title_ASC
  title_DESC
  copyright_ASC
  copyright_DESC
  alt_ASC
  alt_DESC
  assetPath_ASC
  assetPath_DESC
  status_ASC
  status_DESC
  visibility_ASC
  visibility_DESC
}

type GraphicProjectPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  type: ProjectType!
  title: String!
  copyright: Copyright
  alt: String
  assetPath: String
  status: PublishStatus
  visibility: Visibility
}

type GraphicProjectSubscriptionPayload {
  mutation: MutationType!
  node: GraphicProject
  updatedFields: [String!]
  previousValues: GraphicProjectPreviousValues
}

input GraphicProjectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GraphicProjectWhereInput
  AND: [GraphicProjectSubscriptionWhereInput!]
  OR: [GraphicProjectSubscriptionWhereInput!]
  NOT: [GraphicProjectSubscriptionWhereInput!]
}

input GraphicProjectUpdateInput {
  publishedAt: DateTime
  type: ProjectType
  title: String
  copyright: Copyright
  alt: String
  descPublic: ContentFieldUpdateOneInput
  descInternal: ContentFieldUpdateOneInput
  assetPath: String
  author: UserUpdateOneInput
  team: TeamUpdateOneInput
  status: PublishStatus
  visibility: Visibility
  supportFiles: SupportFileUpdateManyInput
  images: ImageFileUpdateManyInput
  categories: CategoryUpdateManyInput
  tags: TagUpdateManyInput
}

input GraphicProjectUpdateManyMutationInput {
  publishedAt: DateTime
  type: ProjectType
  title: String
  copyright: Copyright
  alt: String
  assetPath: String
  status: PublishStatus
  visibility: Visibility
}

input GraphicProjectWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  type: ProjectType
  type_not: ProjectType
  type_in: [ProjectType!]
  type_not_in: [ProjectType!]
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  copyright: Copyright
  copyright_not: Copyright
  copyright_in: [Copyright!]
  copyright_not_in: [Copyright!]
  alt: String
  alt_not: String
  alt_in: [String!]
  alt_not_in: [String!]
  alt_lt: String
  alt_lte: String
  alt_gt: String
  alt_gte: String
  alt_contains: String
  alt_not_contains: String
  alt_starts_with: String
  alt_not_starts_with: String
  alt_ends_with: String
  alt_not_ends_with: String
  descPublic: ContentFieldWhereInput
  descInternal: ContentFieldWhereInput
  assetPath: String
  assetPath_not: String
  assetPath_in: [String!]
  assetPath_not_in: [String!]
  assetPath_lt: String
  assetPath_lte: String
  assetPath_gt: String
  assetPath_gte: String
  assetPath_contains: String
  assetPath_not_contains: String
  assetPath_starts_with: String
  assetPath_not_starts_with: String
  assetPath_ends_with: String
  assetPath_not_ends_with: String
  author: UserWhereInput
  team: TeamWhereInput
  status: PublishStatus
  status_not: PublishStatus
  status_in: [PublishStatus!]
  status_not_in: [PublishStatus!]
  visibility: Visibility
  visibility_not: Visibility
  visibility_in: [Visibility!]
  visibility_not_in: [Visibility!]
  supportFiles_every: SupportFileWhereInput
  supportFiles_some: SupportFileWhereInput
  supportFiles_none: SupportFileWhereInput
  images_every: ImageFileWhereInput
  images_some: ImageFileWhereInput
  images_none: ImageFileWhereInput
  categories_every: CategoryWhereInput
  categories_some: CategoryWhereInput
  categories_none: CategoryWhereInput
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  AND: [GraphicProjectWhereInput!]
  OR: [GraphicProjectWhereInput!]
  NOT: [GraphicProjectWhereInput!]
}

input GraphicProjectWhereUniqueInput {
  id: ID
}

type GraphicStyle {
  id: ID!
  name: String!
}

type GraphicStyleConnection {
  pageInfo: PageInfo!
  edges: [GraphicStyleEdge]!
  aggregate: AggregateGraphicStyle!
}

input GraphicStyleCreateInput {
  id: ID
  name: String!
}

input GraphicStyleCreateOneInput {
  create: GraphicStyleCreateInput
  connect: GraphicStyleWhereUniqueInput
}

type GraphicStyleEdge {
  node: GraphicStyle!
  cursor: String!
}

enum GraphicStyleOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type GraphicStylePreviousValues {
  id: ID!
  name: String!
}

type GraphicStyleSubscriptionPayload {
  mutation: MutationType!
  node: GraphicStyle
  updatedFields: [String!]
  previousValues: GraphicStylePreviousValues
}

input GraphicStyleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GraphicStyleWhereInput
  AND: [GraphicStyleSubscriptionWhereInput!]
  OR: [GraphicStyleSubscriptionWhereInput!]
  NOT: [GraphicStyleSubscriptionWhereInput!]
}

input GraphicStyleUpdateDataInput {
  name: String
}

input GraphicStyleUpdateInput {
  name: String
}

input GraphicStyleUpdateManyMutationInput {
  name: String
}

input GraphicStyleUpdateOneInput {
  create: GraphicStyleCreateInput
  update: GraphicStyleUpdateDataInput
  upsert: GraphicStyleUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: GraphicStyleWhereUniqueInput
}

input GraphicStyleUpsertNestedInput {
  update: GraphicStyleUpdateDataInput!
  create: GraphicStyleCreateInput!
}

input GraphicStyleWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [GraphicStyleWhereInput!]
  OR: [GraphicStyleWhereInput!]
  NOT: [GraphicStyleWhereInput!]
}

input GraphicStyleWhereUniqueInput {
  id: ID
  name: String
}

type ImageFile {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  visibility: Visibility
  language: Language
  dimensions: Dimensions
  url: String
  signedUrl: String
  alt: String
  longdesc: String
  caption: String
  title: String
  filename: String
  filetype: String
  filesize: Float
  use: ImageUse
  md5: String
  quality: ImageQuality
  style: GraphicStyle
  social(where: SocialPlatformWhereInput, orderBy: SocialPlatformOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SocialPlatform!]
}

type ImageFileConnection {
  pageInfo: PageInfo!
  edges: [ImageFileEdge]!
  aggregate: AggregateImageFile!
}

input ImageFileCreateInput {
  id: ID
  visibility: Visibility
  language: LanguageCreateOneInput
  dimensions: DimensionsCreateOneInput
  url: String
  signedUrl: String
  alt: String
  longdesc: String
  caption: String
  title: String
  filename: String
  filetype: String
  filesize: Float
  use: ImageUseCreateOneInput
  md5: String
  quality: ImageQuality
  style: GraphicStyleCreateOneInput
  social: SocialPlatformCreateManyInput
}

input ImageFileCreateManyInput {
  create: [ImageFileCreateInput!]
  connect: [ImageFileWhereUniqueInput!]
}

input ImageFileCreateOneInput {
  create: ImageFileCreateInput
  connect: ImageFileWhereUniqueInput
}

type ImageFileEdge {
  node: ImageFile!
  cursor: String!
}

enum ImageFileOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  visibility_ASC
  visibility_DESC
  url_ASC
  url_DESC
  signedUrl_ASC
  signedUrl_DESC
  alt_ASC
  alt_DESC
  longdesc_ASC
  longdesc_DESC
  caption_ASC
  caption_DESC
  title_ASC
  title_DESC
  filename_ASC
  filename_DESC
  filetype_ASC
  filetype_DESC
  filesize_ASC
  filesize_DESC
  md5_ASC
  md5_DESC
  quality_ASC
  quality_DESC
}

type ImageFilePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  visibility: Visibility
  url: String
  signedUrl: String
  alt: String
  longdesc: String
  caption: String
  title: String
  filename: String
  filetype: String
  filesize: Float
  md5: String
  quality: ImageQuality
}

input ImageFileScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  visibility: Visibility
  visibility_not: Visibility
  visibility_in: [Visibility!]
  visibility_not_in: [Visibility!]
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  signedUrl: String
  signedUrl_not: String
  signedUrl_in: [String!]
  signedUrl_not_in: [String!]
  signedUrl_lt: String
  signedUrl_lte: String
  signedUrl_gt: String
  signedUrl_gte: String
  signedUrl_contains: String
  signedUrl_not_contains: String
  signedUrl_starts_with: String
  signedUrl_not_starts_with: String
  signedUrl_ends_with: String
  signedUrl_not_ends_with: String
  alt: String
  alt_not: String
  alt_in: [String!]
  alt_not_in: [String!]
  alt_lt: String
  alt_lte: String
  alt_gt: String
  alt_gte: String
  alt_contains: String
  alt_not_contains: String
  alt_starts_with: String
  alt_not_starts_with: String
  alt_ends_with: String
  alt_not_ends_with: String
  longdesc: String
  longdesc_not: String
  longdesc_in: [String!]
  longdesc_not_in: [String!]
  longdesc_lt: String
  longdesc_lte: String
  longdesc_gt: String
  longdesc_gte: String
  longdesc_contains: String
  longdesc_not_contains: String
  longdesc_starts_with: String
  longdesc_not_starts_with: String
  longdesc_ends_with: String
  longdesc_not_ends_with: String
  caption: String
  caption_not: String
  caption_in: [String!]
  caption_not_in: [String!]
  caption_lt: String
  caption_lte: String
  caption_gt: String
  caption_gte: String
  caption_contains: String
  caption_not_contains: String
  caption_starts_with: String
  caption_not_starts_with: String
  caption_ends_with: String
  caption_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  filename: String
  filename_not: String
  filename_in: [String!]
  filename_not_in: [String!]
  filename_lt: String
  filename_lte: String
  filename_gt: String
  filename_gte: String
  filename_contains: String
  filename_not_contains: String
  filename_starts_with: String
  filename_not_starts_with: String
  filename_ends_with: String
  filename_not_ends_with: String
  filetype: String
  filetype_not: String
  filetype_in: [String!]
  filetype_not_in: [String!]
  filetype_lt: String
  filetype_lte: String
  filetype_gt: String
  filetype_gte: String
  filetype_contains: String
  filetype_not_contains: String
  filetype_starts_with: String
  filetype_not_starts_with: String
  filetype_ends_with: String
  filetype_not_ends_with: String
  filesize: Float
  filesize_not: Float
  filesize_in: [Float!]
  filesize_not_in: [Float!]
  filesize_lt: Float
  filesize_lte: Float
  filesize_gt: Float
  filesize_gte: Float
  md5: String
  md5_not: String
  md5_in: [String!]
  md5_not_in: [String!]
  md5_lt: String
  md5_lte: String
  md5_gt: String
  md5_gte: String
  md5_contains: String
  md5_not_contains: String
  md5_starts_with: String
  md5_not_starts_with: String
  md5_ends_with: String
  md5_not_ends_with: String
  quality: ImageQuality
  quality_not: ImageQuality
  quality_in: [ImageQuality!]
  quality_not_in: [ImageQuality!]
  AND: [ImageFileScalarWhereInput!]
  OR: [ImageFileScalarWhereInput!]
  NOT: [ImageFileScalarWhereInput!]
}

type ImageFileSubscriptionPayload {
  mutation: MutationType!
  node: ImageFile
  updatedFields: [String!]
  previousValues: ImageFilePreviousValues
}

input ImageFileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ImageFileWhereInput
  AND: [ImageFileSubscriptionWhereInput!]
  OR: [ImageFileSubscriptionWhereInput!]
  NOT: [ImageFileSubscriptionWhereInput!]
}

input ImageFileUpdateDataInput {
  visibility: Visibility
  language: LanguageUpdateOneInput
  dimensions: DimensionsUpdateOneInput
  url: String
  signedUrl: String
  alt: String
  longdesc: String
  caption: String
  title: String
  filename: String
  filetype: String
  filesize: Float
  use: ImageUseUpdateOneInput
  md5: String
  quality: ImageQuality
  style: GraphicStyleUpdateOneInput
  social: SocialPlatformUpdateManyInput
}

input ImageFileUpdateInput {
  visibility: Visibility
  language: LanguageUpdateOneInput
  dimensions: DimensionsUpdateOneInput
  url: String
  signedUrl: String
  alt: String
  longdesc: String
  caption: String
  title: String
  filename: String
  filetype: String
  filesize: Float
  use: ImageUseUpdateOneInput
  md5: String
  quality: ImageQuality
  style: GraphicStyleUpdateOneInput
  social: SocialPlatformUpdateManyInput
}

input ImageFileUpdateManyDataInput {
  visibility: Visibility
  url: String
  signedUrl: String
  alt: String
  longdesc: String
  caption: String
  title: String
  filename: String
  filetype: String
  filesize: Float
  md5: String
  quality: ImageQuality
}

input ImageFileUpdateManyInput {
  create: [ImageFileCreateInput!]
  update: [ImageFileUpdateWithWhereUniqueNestedInput!]
  upsert: [ImageFileUpsertWithWhereUniqueNestedInput!]
  delete: [ImageFileWhereUniqueInput!]
  connect: [ImageFileWhereUniqueInput!]
  set: [ImageFileWhereUniqueInput!]
  disconnect: [ImageFileWhereUniqueInput!]
  deleteMany: [ImageFileScalarWhereInput!]
  updateMany: [ImageFileUpdateManyWithWhereNestedInput!]
}

input ImageFileUpdateManyMutationInput {
  visibility: Visibility
  url: String
  signedUrl: String
  alt: String
  longdesc: String
  caption: String
  title: String
  filename: String
  filetype: String
  filesize: Float
  md5: String
  quality: ImageQuality
}

input ImageFileUpdateManyWithWhereNestedInput {
  where: ImageFileScalarWhereInput!
  data: ImageFileUpdateManyDataInput!
}

input ImageFileUpdateOneInput {
  create: ImageFileCreateInput
  update: ImageFileUpdateDataInput
  upsert: ImageFileUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ImageFileWhereUniqueInput
}

input ImageFileUpdateWithWhereUniqueNestedInput {
  where: ImageFileWhereUniqueInput!
  data: ImageFileUpdateDataInput!
}

input ImageFileUpsertNestedInput {
  update: ImageFileUpdateDataInput!
  create: ImageFileCreateInput!
}

input ImageFileUpsertWithWhereUniqueNestedInput {
  where: ImageFileWhereUniqueInput!
  update: ImageFileUpdateDataInput!
  create: ImageFileCreateInput!
}

input ImageFileWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  visibility: Visibility
  visibility_not: Visibility
  visibility_in: [Visibility!]
  visibility_not_in: [Visibility!]
  language: LanguageWhereInput
  dimensions: DimensionsWhereInput
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  signedUrl: String
  signedUrl_not: String
  signedUrl_in: [String!]
  signedUrl_not_in: [String!]
  signedUrl_lt: String
  signedUrl_lte: String
  signedUrl_gt: String
  signedUrl_gte: String
  signedUrl_contains: String
  signedUrl_not_contains: String
  signedUrl_starts_with: String
  signedUrl_not_starts_with: String
  signedUrl_ends_with: String
  signedUrl_not_ends_with: String
  alt: String
  alt_not: String
  alt_in: [String!]
  alt_not_in: [String!]
  alt_lt: String
  alt_lte: String
  alt_gt: String
  alt_gte: String
  alt_contains: String
  alt_not_contains: String
  alt_starts_with: String
  alt_not_starts_with: String
  alt_ends_with: String
  alt_not_ends_with: String
  longdesc: String
  longdesc_not: String
  longdesc_in: [String!]
  longdesc_not_in: [String!]
  longdesc_lt: String
  longdesc_lte: String
  longdesc_gt: String
  longdesc_gte: String
  longdesc_contains: String
  longdesc_not_contains: String
  longdesc_starts_with: String
  longdesc_not_starts_with: String
  longdesc_ends_with: String
  longdesc_not_ends_with: String
  caption: String
  caption_not: String
  caption_in: [String!]
  caption_not_in: [String!]
  caption_lt: String
  caption_lte: String
  caption_gt: String
  caption_gte: String
  caption_contains: String
  caption_not_contains: String
  caption_starts_with: String
  caption_not_starts_with: String
  caption_ends_with: String
  caption_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  filename: String
  filename_not: String
  filename_in: [String!]
  filename_not_in: [String!]
  filename_lt: String
  filename_lte: String
  filename_gt: String
  filename_gte: String
  filename_contains: String
  filename_not_contains: String
  filename_starts_with: String
  filename_not_starts_with: String
  filename_ends_with: String
  filename_not_ends_with: String
  filetype: String
  filetype_not: String
  filetype_in: [String!]
  filetype_not_in: [String!]
  filetype_lt: String
  filetype_lte: String
  filetype_gt: String
  filetype_gte: String
  filetype_contains: String
  filetype_not_contains: String
  filetype_starts_with: String
  filetype_not_starts_with: String
  filetype_ends_with: String
  filetype_not_ends_with: String
  filesize: Float
  filesize_not: Float
  filesize_in: [Float!]
  filesize_not_in: [Float!]
  filesize_lt: Float
  filesize_lte: Float
  filesize_gt: Float
  filesize_gte: Float
  use: ImageUseWhereInput
  md5: String
  md5_not: String
  md5_in: [String!]
  md5_not_in: [String!]
  md5_lt: String
  md5_lte: String
  md5_gt: String
  md5_gte: String
  md5_contains: String
  md5_not_contains: String
  md5_starts_with: String
  md5_not_starts_with: String
  md5_ends_with: String
  md5_not_ends_with: String
  quality: ImageQuality
  quality_not: ImageQuality
  quality_in: [ImageQuality!]
  quality_not_in: [ImageQuality!]
  style: GraphicStyleWhereInput
  social_every: SocialPlatformWhereInput
  social_some: SocialPlatformWhereInput
  social_none: SocialPlatformWhereInput
  AND: [ImageFileWhereInput!]
  OR: [ImageFileWhereInput!]
  NOT: [ImageFileWhereInput!]
}

input ImageFileWhereUniqueInput {
  id: ID
}

enum ImageQuality {
  WEB
  PRINT
}

type ImageUse {
  id: ID!
  name: String!
}

type ImageUseConnection {
  pageInfo: PageInfo!
  edges: [ImageUseEdge]!
  aggregate: AggregateImageUse!
}

input ImageUseCreateInput {
  id: ID
  name: String!
}

input ImageUseCreateOneInput {
  create: ImageUseCreateInput
  connect: ImageUseWhereUniqueInput
}

type ImageUseEdge {
  node: ImageUse!
  cursor: String!
}

enum ImageUseOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type ImageUsePreviousValues {
  id: ID!
  name: String!
}

type ImageUseSubscriptionPayload {
  mutation: MutationType!
  node: ImageUse
  updatedFields: [String!]
  previousValues: ImageUsePreviousValues
}

input ImageUseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ImageUseWhereInput
  AND: [ImageUseSubscriptionWhereInput!]
  OR: [ImageUseSubscriptionWhereInput!]
  NOT: [ImageUseSubscriptionWhereInput!]
}

input ImageUseUpdateDataInput {
  name: String
}

input ImageUseUpdateInput {
  name: String
}

input ImageUseUpdateManyMutationInput {
  name: String
}

input ImageUseUpdateOneInput {
  create: ImageUseCreateInput
  update: ImageUseUpdateDataInput
  upsert: ImageUseUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ImageUseWhereUniqueInput
}

input ImageUseUpsertNestedInput {
  update: ImageUseUpdateDataInput!
  create: ImageUseCreateInput!
}

input ImageUseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [ImageUseWhereInput!]
  OR: [ImageUseWhereInput!]
  NOT: [ImageUseWhereInput!]
}

input ImageUseWhereUniqueInput {
  id: ID
  name: String
}

type Language {
  id: ID!
  languageCode: String!
  locale: String!
  textDirection: TextDirection!
  displayName: String!
  nativeName: String!
}

type LanguageConnection {
  pageInfo: PageInfo!
  edges: [LanguageEdge]!
  aggregate: AggregateLanguage!
}

input LanguageCreateInput {
  id: ID
  languageCode: String!
  locale: String!
  textDirection: TextDirection
  displayName: String!
  nativeName: String!
}

input LanguageCreateOneInput {
  create: LanguageCreateInput
  connect: LanguageWhereUniqueInput
}

type LanguageEdge {
  node: Language!
  cursor: String!
}

enum LanguageOrderByInput {
  id_ASC
  id_DESC
  languageCode_ASC
  languageCode_DESC
  locale_ASC
  locale_DESC
  textDirection_ASC
  textDirection_DESC
  displayName_ASC
  displayName_DESC
  nativeName_ASC
  nativeName_DESC
}

type LanguagePreviousValues {
  id: ID!
  languageCode: String!
  locale: String!
  textDirection: TextDirection!
  displayName: String!
  nativeName: String!
}

type LanguageSubscriptionPayload {
  mutation: MutationType!
  node: Language
  updatedFields: [String!]
  previousValues: LanguagePreviousValues
}

input LanguageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LanguageWhereInput
  AND: [LanguageSubscriptionWhereInput!]
  OR: [LanguageSubscriptionWhereInput!]
  NOT: [LanguageSubscriptionWhereInput!]
}

type LanguageTranslation {
  id: ID!
  name: String!
  language: Language
}

type LanguageTranslationConnection {
  pageInfo: PageInfo!
  edges: [LanguageTranslationEdge]!
  aggregate: AggregateLanguageTranslation!
}

input LanguageTranslationCreateInput {
  id: ID
  name: String!
  language: LanguageCreateOneInput
}

input LanguageTranslationCreateManyInput {
  create: [LanguageTranslationCreateInput!]
  connect: [LanguageTranslationWhereUniqueInput!]
}

type LanguageTranslationEdge {
  node: LanguageTranslation!
  cursor: String!
}

enum LanguageTranslationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type LanguageTranslationPreviousValues {
  id: ID!
  name: String!
}

input LanguageTranslationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [LanguageTranslationScalarWhereInput!]
  OR: [LanguageTranslationScalarWhereInput!]
  NOT: [LanguageTranslationScalarWhereInput!]
}

type LanguageTranslationSubscriptionPayload {
  mutation: MutationType!
  node: LanguageTranslation
  updatedFields: [String!]
  previousValues: LanguageTranslationPreviousValues
}

input LanguageTranslationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LanguageTranslationWhereInput
  AND: [LanguageTranslationSubscriptionWhereInput!]
  OR: [LanguageTranslationSubscriptionWhereInput!]
  NOT: [LanguageTranslationSubscriptionWhereInput!]
}

input LanguageTranslationUpdateDataInput {
  name: String
  language: LanguageUpdateOneInput
}

input LanguageTranslationUpdateInput {
  name: String
  language: LanguageUpdateOneInput
}

input LanguageTranslationUpdateManyDataInput {
  name: String
}

input LanguageTranslationUpdateManyInput {
  create: [LanguageTranslationCreateInput!]
  update: [LanguageTranslationUpdateWithWhereUniqueNestedInput!]
  upsert: [LanguageTranslationUpsertWithWhereUniqueNestedInput!]
  delete: [LanguageTranslationWhereUniqueInput!]
  connect: [LanguageTranslationWhereUniqueInput!]
  set: [LanguageTranslationWhereUniqueInput!]
  disconnect: [LanguageTranslationWhereUniqueInput!]
  deleteMany: [LanguageTranslationScalarWhereInput!]
  updateMany: [LanguageTranslationUpdateManyWithWhereNestedInput!]
}

input LanguageTranslationUpdateManyMutationInput {
  name: String
}

input LanguageTranslationUpdateManyWithWhereNestedInput {
  where: LanguageTranslationScalarWhereInput!
  data: LanguageTranslationUpdateManyDataInput!
}

input LanguageTranslationUpdateWithWhereUniqueNestedInput {
  where: LanguageTranslationWhereUniqueInput!
  data: LanguageTranslationUpdateDataInput!
}

input LanguageTranslationUpsertWithWhereUniqueNestedInput {
  where: LanguageTranslationWhereUniqueInput!
  update: LanguageTranslationUpdateDataInput!
  create: LanguageTranslationCreateInput!
}

input LanguageTranslationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  language: LanguageWhereInput
  AND: [LanguageTranslationWhereInput!]
  OR: [LanguageTranslationWhereInput!]
  NOT: [LanguageTranslationWhereInput!]
}

input LanguageTranslationWhereUniqueInput {
  id: ID
}

input LanguageUpdateDataInput {
  languageCode: String
  locale: String
  textDirection: TextDirection
  displayName: String
  nativeName: String
}

input LanguageUpdateInput {
  languageCode: String
  locale: String
  textDirection: TextDirection
  displayName: String
  nativeName: String
}

input LanguageUpdateManyMutationInput {
  languageCode: String
  locale: String
  textDirection: TextDirection
  displayName: String
  nativeName: String
}

input LanguageUpdateOneInput {
  create: LanguageCreateInput
  update: LanguageUpdateDataInput
  upsert: LanguageUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: LanguageWhereUniqueInput
}

input LanguageUpdateOneRequiredInput {
  create: LanguageCreateInput
  update: LanguageUpdateDataInput
  upsert: LanguageUpsertNestedInput
  connect: LanguageWhereUniqueInput
}

input LanguageUpsertNestedInput {
  update: LanguageUpdateDataInput!
  create: LanguageCreateInput!
}

input LanguageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  languageCode: String
  languageCode_not: String
  languageCode_in: [String!]
  languageCode_not_in: [String!]
  languageCode_lt: String
  languageCode_lte: String
  languageCode_gt: String
  languageCode_gte: String
  languageCode_contains: String
  languageCode_not_contains: String
  languageCode_starts_with: String
  languageCode_not_starts_with: String
  languageCode_ends_with: String
  languageCode_not_ends_with: String
  locale: String
  locale_not: String
  locale_in: [String!]
  locale_not_in: [String!]
  locale_lt: String
  locale_lte: String
  locale_gt: String
  locale_gte: String
  locale_contains: String
  locale_not_contains: String
  locale_starts_with: String
  locale_not_starts_with: String
  locale_ends_with: String
  locale_not_ends_with: String
  textDirection: TextDirection
  textDirection_not: TextDirection
  textDirection_in: [TextDirection!]
  textDirection_not_in: [TextDirection!]
  displayName: String
  displayName_not: String
  displayName_in: [String!]
  displayName_not_in: [String!]
  displayName_lt: String
  displayName_lte: String
  displayName_gt: String
  displayName_gte: String
  displayName_contains: String
  displayName_not_contains: String
  displayName_starts_with: String
  displayName_not_starts_with: String
  displayName_ends_with: String
  displayName_not_ends_with: String
  nativeName: String
  nativeName_not: String
  nativeName_in: [String!]
  nativeName_not_in: [String!]
  nativeName_lt: String
  nativeName_lte: String
  nativeName_gt: String
  nativeName_gte: String
  nativeName_contains: String
  nativeName_not_contains: String
  nativeName_starts_with: String
  nativeName_not_starts_with: String
  nativeName_ends_with: String
  nativeName_not_ends_with: String
  AND: [LanguageWhereInput!]
  OR: [LanguageWhereInput!]
  NOT: [LanguageWhereInput!]
}

input LanguageWhereUniqueInput {
  id: ID
  locale: String
}

scalar Long

type Mutation {
  createBureau(data: BureauCreateInput!): Bureau!
  updateBureau(data: BureauUpdateInput!, where: BureauWhereUniqueInput!): Bureau
  updateManyBureaus(data: BureauUpdateManyMutationInput!, where: BureauWhereInput): BatchPayload!
  upsertBureau(where: BureauWhereUniqueInput!, create: BureauCreateInput!, update: BureauUpdateInput!): Bureau!
  deleteBureau(where: BureauWhereUniqueInput!): Bureau
  deleteManyBureaus(where: BureauWhereInput): BatchPayload!
  createCategory(data: CategoryCreateInput!): Category!
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  createContentField(data: ContentFieldCreateInput!): ContentField!
  updateContentField(data: ContentFieldUpdateInput!, where: ContentFieldWhereUniqueInput!): ContentField
  updateManyContentFields(data: ContentFieldUpdateManyMutationInput!, where: ContentFieldWhereInput): BatchPayload!
  upsertContentField(where: ContentFieldWhereUniqueInput!, create: ContentFieldCreateInput!, update: ContentFieldUpdateInput!): ContentField!
  deleteContentField(where: ContentFieldWhereUniqueInput!): ContentField
  deleteManyContentFields(where: ContentFieldWhereInput): BatchPayload!
  createCountry(data: CountryCreateInput!): Country!
  updateCountry(data: CountryUpdateInput!, where: CountryWhereUniqueInput!): Country
  updateManyCountries(data: CountryUpdateManyMutationInput!, where: CountryWhereInput): BatchPayload!
  upsertCountry(where: CountryWhereUniqueInput!, create: CountryCreateInput!, update: CountryUpdateInput!): Country!
  deleteCountry(where: CountryWhereUniqueInput!): Country
  deleteManyCountries(where: CountryWhereInput): BatchPayload!
  createDimensions(data: DimensionsCreateInput!): Dimensions!
  updateDimensions(data: DimensionsUpdateInput!, where: DimensionsWhereUniqueInput!): Dimensions
  updateManyDimensionses(data: DimensionsUpdateManyMutationInput!, where: DimensionsWhereInput): BatchPayload!
  upsertDimensions(where: DimensionsWhereUniqueInput!, create: DimensionsCreateInput!, update: DimensionsUpdateInput!): Dimensions!
  deleteDimensions(where: DimensionsWhereUniqueInput!): Dimensions
  deleteManyDimensionses(where: DimensionsWhereInput): BatchPayload!
  createDocumentConversionFormat(data: DocumentConversionFormatCreateInput!): DocumentConversionFormat!
  updateDocumentConversionFormat(data: DocumentConversionFormatUpdateInput!, where: DocumentConversionFormatWhereUniqueInput!): DocumentConversionFormat
  updateManyDocumentConversionFormats(data: DocumentConversionFormatUpdateManyMutationInput!, where: DocumentConversionFormatWhereInput): BatchPayload!
  upsertDocumentConversionFormat(where: DocumentConversionFormatWhereUniqueInput!, create: DocumentConversionFormatCreateInput!, update: DocumentConversionFormatUpdateInput!): DocumentConversionFormat!
  deleteDocumentConversionFormat(where: DocumentConversionFormatWhereUniqueInput!): DocumentConversionFormat
  deleteManyDocumentConversionFormats(where: DocumentConversionFormatWhereInput): BatchPayload!
  createDocumentFile(data: DocumentFileCreateInput!): DocumentFile!
  updateDocumentFile(data: DocumentFileUpdateInput!, where: DocumentFileWhereUniqueInput!): DocumentFile
  updateManyDocumentFiles(data: DocumentFileUpdateManyMutationInput!, where: DocumentFileWhereInput): BatchPayload!
  upsertDocumentFile(where: DocumentFileWhereUniqueInput!, create: DocumentFileCreateInput!, update: DocumentFileUpdateInput!): DocumentFile!
  deleteDocumentFile(where: DocumentFileWhereUniqueInput!): DocumentFile
  deleteManyDocumentFiles(where: DocumentFileWhereInput): BatchPayload!
  createDocumentUse(data: DocumentUseCreateInput!): DocumentUse!
  updateDocumentUse(data: DocumentUseUpdateInput!, where: DocumentUseWhereUniqueInput!): DocumentUse
  updateManyDocumentUses(data: DocumentUseUpdateManyMutationInput!, where: DocumentUseWhereInput): BatchPayload!
  upsertDocumentUse(where: DocumentUseWhereUniqueInput!, create: DocumentUseCreateInput!, update: DocumentUseUpdateInput!): DocumentUse!
  deleteDocumentUse(where: DocumentUseWhereUniqueInput!): DocumentUse
  deleteManyDocumentUses(where: DocumentUseWhereInput): BatchPayload!
  createGraphicProject(data: GraphicProjectCreateInput!): GraphicProject!
  updateGraphicProject(data: GraphicProjectUpdateInput!, where: GraphicProjectWhereUniqueInput!): GraphicProject
  updateManyGraphicProjects(data: GraphicProjectUpdateManyMutationInput!, where: GraphicProjectWhereInput): BatchPayload!
  upsertGraphicProject(where: GraphicProjectWhereUniqueInput!, create: GraphicProjectCreateInput!, update: GraphicProjectUpdateInput!): GraphicProject!
  deleteGraphicProject(where: GraphicProjectWhereUniqueInput!): GraphicProject
  deleteManyGraphicProjects(where: GraphicProjectWhereInput): BatchPayload!
  createGraphicStyle(data: GraphicStyleCreateInput!): GraphicStyle!
  updateGraphicStyle(data: GraphicStyleUpdateInput!, where: GraphicStyleWhereUniqueInput!): GraphicStyle
  updateManyGraphicStyles(data: GraphicStyleUpdateManyMutationInput!, where: GraphicStyleWhereInput): BatchPayload!
  upsertGraphicStyle(where: GraphicStyleWhereUniqueInput!, create: GraphicStyleCreateInput!, update: GraphicStyleUpdateInput!): GraphicStyle!
  deleteGraphicStyle(where: GraphicStyleWhereUniqueInput!): GraphicStyle
  deleteManyGraphicStyles(where: GraphicStyleWhereInput): BatchPayload!
  createImageFile(data: ImageFileCreateInput!): ImageFile!
  updateImageFile(data: ImageFileUpdateInput!, where: ImageFileWhereUniqueInput!): ImageFile
  updateManyImageFiles(data: ImageFileUpdateManyMutationInput!, where: ImageFileWhereInput): BatchPayload!
  upsertImageFile(where: ImageFileWhereUniqueInput!, create: ImageFileCreateInput!, update: ImageFileUpdateInput!): ImageFile!
  deleteImageFile(where: ImageFileWhereUniqueInput!): ImageFile
  deleteManyImageFiles(where: ImageFileWhereInput): BatchPayload!
  createImageUse(data: ImageUseCreateInput!): ImageUse!
  updateImageUse(data: ImageUseUpdateInput!, where: ImageUseWhereUniqueInput!): ImageUse
  updateManyImageUses(data: ImageUseUpdateManyMutationInput!, where: ImageUseWhereInput): BatchPayload!
  upsertImageUse(where: ImageUseWhereUniqueInput!, create: ImageUseCreateInput!, update: ImageUseUpdateInput!): ImageUse!
  deleteImageUse(where: ImageUseWhereUniqueInput!): ImageUse
  deleteManyImageUses(where: ImageUseWhereInput): BatchPayload!
  createLanguage(data: LanguageCreateInput!): Language!
  updateLanguage(data: LanguageUpdateInput!, where: LanguageWhereUniqueInput!): Language
  updateManyLanguages(data: LanguageUpdateManyMutationInput!, where: LanguageWhereInput): BatchPayload!
  upsertLanguage(where: LanguageWhereUniqueInput!, create: LanguageCreateInput!, update: LanguageUpdateInput!): Language!
  deleteLanguage(where: LanguageWhereUniqueInput!): Language
  deleteManyLanguages(where: LanguageWhereInput): BatchPayload!
  createLanguageTranslation(data: LanguageTranslationCreateInput!): LanguageTranslation!
  updateLanguageTranslation(data: LanguageTranslationUpdateInput!, where: LanguageTranslationWhereUniqueInput!): LanguageTranslation
  updateManyLanguageTranslations(data: LanguageTranslationUpdateManyMutationInput!, where: LanguageTranslationWhereInput): BatchPayload!
  upsertLanguageTranslation(where: LanguageTranslationWhereUniqueInput!, create: LanguageTranslationCreateInput!, update: LanguageTranslationUpdateInput!): LanguageTranslation!
  deleteLanguageTranslation(where: LanguageTranslationWhereUniqueInput!): LanguageTranslation
  deleteManyLanguageTranslations(where: LanguageTranslationWhereInput): BatchPayload!
  createOffice(data: OfficeCreateInput!): Office!
  updateOffice(data: OfficeUpdateInput!, where: OfficeWhereUniqueInput!): Office
  updateManyOffices(data: OfficeUpdateManyMutationInput!, where: OfficeWhereInput): BatchPayload!
  upsertOffice(where: OfficeWhereUniqueInput!, create: OfficeCreateInput!, update: OfficeUpdateInput!): Office!
  deleteOffice(where: OfficeWhereUniqueInput!): Office
  deleteManyOffices(where: OfficeWhereInput): BatchPayload!
  createPackage(data: PackageCreateInput!): Package!
  updatePackage(data: PackageUpdateInput!, where: PackageWhereUniqueInput!): Package
  updateManyPackages(data: PackageUpdateManyMutationInput!, where: PackageWhereInput): BatchPayload!
  upsertPackage(where: PackageWhereUniqueInput!, create: PackageCreateInput!, update: PackageUpdateInput!): Package!
  deletePackage(where: PackageWhereUniqueInput!): Package
  deleteManyPackages(where: PackageWhereInput): BatchPayload!
  createPlaybook(data: PlaybookCreateInput!): Playbook!
  updatePlaybook(data: PlaybookUpdateInput!, where: PlaybookWhereUniqueInput!): Playbook
  updateManyPlaybooks(data: PlaybookUpdateManyMutationInput!, where: PlaybookWhereInput): BatchPayload!
  upsertPlaybook(where: PlaybookWhereUniqueInput!, create: PlaybookCreateInput!, update: PlaybookUpdateInput!): Playbook!
  deletePlaybook(where: PlaybookWhereUniqueInput!): Playbook
  deleteManyPlaybooks(where: PlaybookWhereInput): BatchPayload!
  createPolicyPriority(data: PolicyPriorityCreateInput!): PolicyPriority!
  updatePolicyPriority(data: PolicyPriorityUpdateInput!, where: PolicyPriorityWhereUniqueInput!): PolicyPriority
  updateManyPolicyPriorities(data: PolicyPriorityUpdateManyMutationInput!, where: PolicyPriorityWhereInput): BatchPayload!
  upsertPolicyPriority(where: PolicyPriorityWhereUniqueInput!, create: PolicyPriorityCreateInput!, update: PolicyPriorityUpdateInput!): PolicyPriority!
  deletePolicyPriority(where: PolicyPriorityWhereUniqueInput!): PolicyPriority
  deleteManyPolicyPriorities(where: PolicyPriorityWhereInput): BatchPayload!
  createRegion(data: RegionCreateInput!): Region!
  updateRegion(data: RegionUpdateInput!, where: RegionWhereUniqueInput!): Region
  updateManyRegions(data: RegionUpdateManyMutationInput!, where: RegionWhereInput): BatchPayload!
  upsertRegion(where: RegionWhereUniqueInput!, create: RegionCreateInput!, update: RegionUpdateInput!): Region!
  deleteRegion(where: RegionWhereUniqueInput!): Region
  deleteManyRegions(where: RegionWhereInput): BatchPayload!
  createSocialPlatform(data: SocialPlatformCreateInput!): SocialPlatform!
  updateSocialPlatform(data: SocialPlatformUpdateInput!, where: SocialPlatformWhereUniqueInput!): SocialPlatform
  updateManySocialPlatforms(data: SocialPlatformUpdateManyMutationInput!, where: SocialPlatformWhereInput): BatchPayload!
  upsertSocialPlatform(where: SocialPlatformWhereUniqueInput!, create: SocialPlatformCreateInput!, update: SocialPlatformUpdateInput!): SocialPlatform!
  deleteSocialPlatform(where: SocialPlatformWhereUniqueInput!): SocialPlatform
  deleteManySocialPlatforms(where: SocialPlatformWhereInput): BatchPayload!
  createSupportFile(data: SupportFileCreateInput!): SupportFile!
  updateSupportFile(data: SupportFileUpdateInput!, where: SupportFileWhereUniqueInput!): SupportFile
  updateManySupportFiles(data: SupportFileUpdateManyMutationInput!, where: SupportFileWhereInput): BatchPayload!
  upsertSupportFile(where: SupportFileWhereUniqueInput!, create: SupportFileCreateInput!, update: SupportFileUpdateInput!): SupportFile!
  deleteSupportFile(where: SupportFileWhereUniqueInput!): SupportFile
  deleteManySupportFiles(where: SupportFileWhereInput): BatchPayload!
  createSupportFileUse(data: SupportFileUseCreateInput!): SupportFileUse!
  updateSupportFileUse(data: SupportFileUseUpdateInput!, where: SupportFileUseWhereUniqueInput!): SupportFileUse
  updateManySupportFileUses(data: SupportFileUseUpdateManyMutationInput!, where: SupportFileUseWhereInput): BatchPayload!
  upsertSupportFileUse(where: SupportFileUseWhereUniqueInput!, create: SupportFileUseCreateInput!, update: SupportFileUseUpdateInput!): SupportFileUse!
  deleteSupportFileUse(where: SupportFileUseWhereUniqueInput!): SupportFileUse
  deleteManySupportFileUses(where: SupportFileUseWhereInput): BatchPayload!
  createTag(data: TagCreateInput!): Tag!
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  upsertTag(where: TagWhereUniqueInput!, create: TagCreateInput!, update: TagUpdateInput!): Tag!
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteManyTags(where: TagWhereInput): BatchPayload!
  createTeam(data: TeamCreateInput!): Team!
  updateTeam(data: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team
  updateManyTeams(data: TeamUpdateManyMutationInput!, where: TeamWhereInput): BatchPayload!
  upsertTeam(where: TeamWhereUniqueInput!, create: TeamCreateInput!, update: TeamUpdateInput!): Team!
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deleteManyTeams(where: TeamWhereInput): BatchPayload!
  createThumbnail(data: ThumbnailCreateInput!): Thumbnail!
  updateThumbnail(data: ThumbnailUpdateInput!, where: ThumbnailWhereUniqueInput!): Thumbnail
  updateManyThumbnails(data: ThumbnailUpdateManyMutationInput!, where: ThumbnailWhereInput): BatchPayload!
  upsertThumbnail(where: ThumbnailWhereUniqueInput!, create: ThumbnailCreateInput!, update: ThumbnailUpdateInput!): Thumbnail!
  deleteThumbnail(where: ThumbnailWhereUniqueInput!): Thumbnail
  deleteManyThumbnails(where: ThumbnailWhereInput): BatchPayload!
  createToolkit(data: ToolkitCreateInput!): Toolkit!
  updateToolkit(data: ToolkitUpdateInput!, where: ToolkitWhereUniqueInput!): Toolkit
  updateManyToolkits(data: ToolkitUpdateManyMutationInput!, where: ToolkitWhereInput): BatchPayload!
  upsertToolkit(where: ToolkitWhereUniqueInput!, create: ToolkitCreateInput!, update: ToolkitUpdateInput!): Toolkit!
  deleteToolkit(where: ToolkitWhereUniqueInput!): Toolkit
  deleteManyToolkits(where: ToolkitWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createVideoFile(data: VideoFileCreateInput!): VideoFile!
  updateVideoFile(data: VideoFileUpdateInput!, where: VideoFileWhereUniqueInput!): VideoFile
  updateManyVideoFiles(data: VideoFileUpdateManyMutationInput!, where: VideoFileWhereInput): BatchPayload!
  upsertVideoFile(where: VideoFileWhereUniqueInput!, create: VideoFileCreateInput!, update: VideoFileUpdateInput!): VideoFile!
  deleteVideoFile(where: VideoFileWhereUniqueInput!): VideoFile
  deleteManyVideoFiles(where: VideoFileWhereInput): BatchPayload!
  createVideoProject(data: VideoProjectCreateInput!): VideoProject!
  updateVideoProject(data: VideoProjectUpdateInput!, where: VideoProjectWhereUniqueInput!): VideoProject
  updateManyVideoProjects(data: VideoProjectUpdateManyMutationInput!, where: VideoProjectWhereInput): BatchPayload!
  upsertVideoProject(where: VideoProjectWhereUniqueInput!, create: VideoProjectCreateInput!, update: VideoProjectUpdateInput!): VideoProject!
  deleteVideoProject(where: VideoProjectWhereUniqueInput!): VideoProject
  deleteManyVideoProjects(where: VideoProjectWhereInput): BatchPayload!
  createVideoStream(data: VideoStreamCreateInput!): VideoStream!
  updateVideoStream(data: VideoStreamUpdateInput!, where: VideoStreamWhereUniqueInput!): VideoStream
  updateManyVideoStreams(data: VideoStreamUpdateManyMutationInput!, where: VideoStreamWhereInput): BatchPayload!
  upsertVideoStream(where: VideoStreamWhereUniqueInput!, create: VideoStreamCreateInput!, update: VideoStreamUpdateInput!): VideoStream!
  deleteVideoStream(where: VideoStreamWhereUniqueInput!): VideoStream
  deleteManyVideoStreams(where: VideoStreamWhereInput): BatchPayload!
  createVideoUnit(data: VideoUnitCreateInput!): VideoUnit!
  updateVideoUnit(data: VideoUnitUpdateInput!, where: VideoUnitWhereUniqueInput!): VideoUnit
  updateManyVideoUnits(data: VideoUnitUpdateManyMutationInput!, where: VideoUnitWhereInput): BatchPayload!
  upsertVideoUnit(where: VideoUnitWhereUniqueInput!, create: VideoUnitCreateInput!, update: VideoUnitUpdateInput!): VideoUnit!
  deleteVideoUnit(where: VideoUnitWhereUniqueInput!): VideoUnit
  deleteManyVideoUnits(where: VideoUnitWhereInput): BatchPayload!
  createVideoUse(data: VideoUseCreateInput!): VideoUse!
  updateVideoUse(data: VideoUseUpdateInput!, where: VideoUseWhereUniqueInput!): VideoUse
  updateManyVideoUses(data: VideoUseUpdateManyMutationInput!, where: VideoUseWhereInput): BatchPayload!
  upsertVideoUse(where: VideoUseWhereUniqueInput!, create: VideoUseCreateInput!, update: VideoUseUpdateInput!): VideoUse!
  deleteVideoUse(where: VideoUseWhereUniqueInput!): VideoUse
  deleteManyVideoUses(where: VideoUseWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Office {
  id: ID!
  name: String!
  abbr: String!
  bureau: Bureau
}

type OfficeConnection {
  pageInfo: PageInfo!
  edges: [OfficeEdge]!
  aggregate: AggregateOffice!
}

input OfficeCreateInput {
  id: ID
  name: String!
  abbr: String!
  bureau: BureauCreateOneWithoutOfficesInput
}

input OfficeCreateManyWithoutBureauInput {
  create: [OfficeCreateWithoutBureauInput!]
  connect: [OfficeWhereUniqueInput!]
}

input OfficeCreateWithoutBureauInput {
  id: ID
  name: String!
  abbr: String!
}

type OfficeEdge {
  node: Office!
  cursor: String!
}

enum OfficeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  abbr_ASC
  abbr_DESC
}

type OfficePreviousValues {
  id: ID!
  name: String!
  abbr: String!
}

input OfficeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  abbr: String
  abbr_not: String
  abbr_in: [String!]
  abbr_not_in: [String!]
  abbr_lt: String
  abbr_lte: String
  abbr_gt: String
  abbr_gte: String
  abbr_contains: String
  abbr_not_contains: String
  abbr_starts_with: String
  abbr_not_starts_with: String
  abbr_ends_with: String
  abbr_not_ends_with: String
  AND: [OfficeScalarWhereInput!]
  OR: [OfficeScalarWhereInput!]
  NOT: [OfficeScalarWhereInput!]
}

type OfficeSubscriptionPayload {
  mutation: MutationType!
  node: Office
  updatedFields: [String!]
  previousValues: OfficePreviousValues
}

input OfficeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OfficeWhereInput
  AND: [OfficeSubscriptionWhereInput!]
  OR: [OfficeSubscriptionWhereInput!]
  NOT: [OfficeSubscriptionWhereInput!]
}

input OfficeUpdateInput {
  name: String
  abbr: String
  bureau: BureauUpdateOneWithoutOfficesInput
}

input OfficeUpdateManyDataInput {
  name: String
  abbr: String
}

input OfficeUpdateManyMutationInput {
  name: String
  abbr: String
}

input OfficeUpdateManyWithoutBureauInput {
  create: [OfficeCreateWithoutBureauInput!]
  delete: [OfficeWhereUniqueInput!]
  connect: [OfficeWhereUniqueInput!]
  set: [OfficeWhereUniqueInput!]
  disconnect: [OfficeWhereUniqueInput!]
  update: [OfficeUpdateWithWhereUniqueWithoutBureauInput!]
  upsert: [OfficeUpsertWithWhereUniqueWithoutBureauInput!]
  deleteMany: [OfficeScalarWhereInput!]
  updateMany: [OfficeUpdateManyWithWhereNestedInput!]
}

input OfficeUpdateManyWithWhereNestedInput {
  where: OfficeScalarWhereInput!
  data: OfficeUpdateManyDataInput!
}

input OfficeUpdateWithoutBureauDataInput {
  name: String
  abbr: String
}

input OfficeUpdateWithWhereUniqueWithoutBureauInput {
  where: OfficeWhereUniqueInput!
  data: OfficeUpdateWithoutBureauDataInput!
}

input OfficeUpsertWithWhereUniqueWithoutBureauInput {
  where: OfficeWhereUniqueInput!
  update: OfficeUpdateWithoutBureauDataInput!
  create: OfficeCreateWithoutBureauInput!
}

input OfficeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  abbr: String
  abbr_not: String
  abbr_in: [String!]
  abbr_not_in: [String!]
  abbr_lt: String
  abbr_lte: String
  abbr_gt: String
  abbr_gte: String
  abbr_contains: String
  abbr_not_contains: String
  abbr_starts_with: String
  abbr_not_starts_with: String
  abbr_ends_with: String
  abbr_not_ends_with: String
  bureau: BureauWhereInput
  AND: [OfficeWhereInput!]
  OR: [OfficeWhereInput!]
  NOT: [OfficeWhereInput!]
}

input OfficeWhereUniqueInput {
  id: ID
}

type Package {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  type: PackageType!
  title: String!
  assetPath: String
  author: User
  team: Team
  desc: String
  status: PublishStatus
  visibility: Visibility
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category!]
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  documents(where: DocumentFileWhereInput, orderBy: DocumentFileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DocumentFile!]
}

type PackageConnection {
  pageInfo: PageInfo!
  edges: [PackageEdge]!
  aggregate: AggregatePackage!
}

input PackageCreateInput {
  id: ID
  publishedAt: DateTime
  type: PackageType!
  title: String!
  assetPath: String
  author: UserCreateOneInput
  team: TeamCreateOneInput
  desc: String
  status: PublishStatus
  visibility: Visibility
  categories: CategoryCreateManyInput
  tags: TagCreateManyInput
  documents: DocumentFileCreateManyInput
}

type PackageEdge {
  node: Package!
  cursor: String!
}

enum PackageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  type_ASC
  type_DESC
  title_ASC
  title_DESC
  assetPath_ASC
  assetPath_DESC
  desc_ASC
  desc_DESC
  status_ASC
  status_DESC
  visibility_ASC
  visibility_DESC
}

type PackagePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  type: PackageType!
  title: String!
  assetPath: String
  desc: String
  status: PublishStatus
  visibility: Visibility
}

type PackageSubscriptionPayload {
  mutation: MutationType!
  node: Package
  updatedFields: [String!]
  previousValues: PackagePreviousValues
}

input PackageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PackageWhereInput
  AND: [PackageSubscriptionWhereInput!]
  OR: [PackageSubscriptionWhereInput!]
  NOT: [PackageSubscriptionWhereInput!]
}

enum PackageType {
  DAILY_GUIDANCE
  TOOLKIT
  PLAYBOOK
}

input PackageUpdateInput {
  publishedAt: DateTime
  type: PackageType
  title: String
  assetPath: String
  author: UserUpdateOneInput
  team: TeamUpdateOneInput
  desc: String
  status: PublishStatus
  visibility: Visibility
  categories: CategoryUpdateManyInput
  tags: TagUpdateManyInput
  documents: DocumentFileUpdateManyInput
}

input PackageUpdateManyMutationInput {
  publishedAt: DateTime
  type: PackageType
  title: String
  assetPath: String
  desc: String
  status: PublishStatus
  visibility: Visibility
}

input PackageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  type: PackageType
  type_not: PackageType
  type_in: [PackageType!]
  type_not_in: [PackageType!]
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  assetPath: String
  assetPath_not: String
  assetPath_in: [String!]
  assetPath_not_in: [String!]
  assetPath_lt: String
  assetPath_lte: String
  assetPath_gt: String
  assetPath_gte: String
  assetPath_contains: String
  assetPath_not_contains: String
  assetPath_starts_with: String
  assetPath_not_starts_with: String
  assetPath_ends_with: String
  assetPath_not_ends_with: String
  author: UserWhereInput
  team: TeamWhereInput
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  status: PublishStatus
  status_not: PublishStatus
  status_in: [PublishStatus!]
  status_not_in: [PublishStatus!]
  visibility: Visibility
  visibility_not: Visibility
  visibility_in: [Visibility!]
  visibility_not_in: [Visibility!]
  categories_every: CategoryWhereInput
  categories_some: CategoryWhereInput
  categories_none: CategoryWhereInput
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  documents_every: DocumentFileWhereInput
  documents_some: DocumentFileWhereInput
  documents_none: DocumentFileWhereInput
  AND: [PackageWhereInput!]
  OR: [PackageWhereInput!]
  NOT: [PackageWhereInput!]
}

input PackageWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum Permission {
  SUBSCRIBER
  AUTHOR
  EDITOR
  TEAM_ADMIN
  ADMIN
}

type Playbook {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  type: PackageType!
  title: String!
  assetPath: String
  author: User
  team: Team
  desc: String
  status: PublishStatus
  visibility: Visibility
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category!]
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  content: DocumentConversionFormat
  policy: PolicyPriority
  supportFiles(where: SupportFileWhereInput, orderBy: SupportFileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SupportFile!]
}

type PlaybookConnection {
  pageInfo: PageInfo!
  edges: [PlaybookEdge]!
  aggregate: AggregatePlaybook!
}

input PlaybookCreateInput {
  id: ID
  publishedAt: DateTime
  type: PackageType!
  title: String!
  assetPath: String
  author: UserCreateOneInput
  team: TeamCreateOneInput
  desc: String
  status: PublishStatus
  visibility: Visibility
  categories: CategoryCreateManyInput
  tags: TagCreateManyInput
  content: DocumentConversionFormatCreateOneInput
  policy: PolicyPriorityCreateOneInput
  supportFiles: SupportFileCreateManyInput
}

type PlaybookEdge {
  node: Playbook!
  cursor: String!
}

enum PlaybookOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  type_ASC
  type_DESC
  title_ASC
  title_DESC
  assetPath_ASC
  assetPath_DESC
  desc_ASC
  desc_DESC
  status_ASC
  status_DESC
  visibility_ASC
  visibility_DESC
}

type PlaybookPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  type: PackageType!
  title: String!
  assetPath: String
  desc: String
  status: PublishStatus
  visibility: Visibility
}

type PlaybookSubscriptionPayload {
  mutation: MutationType!
  node: Playbook
  updatedFields: [String!]
  previousValues: PlaybookPreviousValues
}

input PlaybookSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PlaybookWhereInput
  AND: [PlaybookSubscriptionWhereInput!]
  OR: [PlaybookSubscriptionWhereInput!]
  NOT: [PlaybookSubscriptionWhereInput!]
}

input PlaybookUpdateInput {
  publishedAt: DateTime
  type: PackageType
  title: String
  assetPath: String
  author: UserUpdateOneInput
  team: TeamUpdateOneInput
  desc: String
  status: PublishStatus
  visibility: Visibility
  categories: CategoryUpdateManyInput
  tags: TagUpdateManyInput
  content: DocumentConversionFormatUpdateOneInput
  policy: PolicyPriorityUpdateOneInput
  supportFiles: SupportFileUpdateManyInput
}

input PlaybookUpdateManyMutationInput {
  publishedAt: DateTime
  type: PackageType
  title: String
  assetPath: String
  desc: String
  status: PublishStatus
  visibility: Visibility
}

input PlaybookWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  type: PackageType
  type_not: PackageType
  type_in: [PackageType!]
  type_not_in: [PackageType!]
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  assetPath: String
  assetPath_not: String
  assetPath_in: [String!]
  assetPath_not_in: [String!]
  assetPath_lt: String
  assetPath_lte: String
  assetPath_gt: String
  assetPath_gte: String
  assetPath_contains: String
  assetPath_not_contains: String
  assetPath_starts_with: String
  assetPath_not_starts_with: String
  assetPath_ends_with: String
  assetPath_not_ends_with: String
  author: UserWhereInput
  team: TeamWhereInput
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  status: PublishStatus
  status_not: PublishStatus
  status_in: [PublishStatus!]
  status_not_in: [PublishStatus!]
  visibility: Visibility
  visibility_not: Visibility
  visibility_in: [Visibility!]
  visibility_not_in: [Visibility!]
  categories_every: CategoryWhereInput
  categories_some: CategoryWhereInput
  categories_none: CategoryWhereInput
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  content: DocumentConversionFormatWhereInput
  policy: PolicyPriorityWhereInput
  supportFiles_every: SupportFileWhereInput
  supportFiles_some: SupportFileWhereInput
  supportFiles_none: SupportFileWhereInput
  AND: [PlaybookWhereInput!]
  OR: [PlaybookWhereInput!]
  NOT: [PlaybookWhereInput!]
}

input PlaybookWhereUniqueInput {
  id: ID
}

type PolicyPriority {
  id: ID!
  name: String!
  theme: String
}

type PolicyPriorityConnection {
  pageInfo: PageInfo!
  edges: [PolicyPriorityEdge]!
  aggregate: AggregatePolicyPriority!
}

input PolicyPriorityCreateInput {
  id: ID
  name: String!
  theme: String
}

input PolicyPriorityCreateOneInput {
  create: PolicyPriorityCreateInput
  connect: PolicyPriorityWhereUniqueInput
}

type PolicyPriorityEdge {
  node: PolicyPriority!
  cursor: String!
}

enum PolicyPriorityOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  theme_ASC
  theme_DESC
}

type PolicyPriorityPreviousValues {
  id: ID!
  name: String!
  theme: String
}

type PolicyPrioritySubscriptionPayload {
  mutation: MutationType!
  node: PolicyPriority
  updatedFields: [String!]
  previousValues: PolicyPriorityPreviousValues
}

input PolicyPrioritySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PolicyPriorityWhereInput
  AND: [PolicyPrioritySubscriptionWhereInput!]
  OR: [PolicyPrioritySubscriptionWhereInput!]
  NOT: [PolicyPrioritySubscriptionWhereInput!]
}

input PolicyPriorityUpdateDataInput {
  name: String
  theme: String
}

input PolicyPriorityUpdateInput {
  name: String
  theme: String
}

input PolicyPriorityUpdateManyMutationInput {
  name: String
  theme: String
}

input PolicyPriorityUpdateOneInput {
  create: PolicyPriorityCreateInput
  update: PolicyPriorityUpdateDataInput
  upsert: PolicyPriorityUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: PolicyPriorityWhereUniqueInput
}

input PolicyPriorityUpsertNestedInput {
  update: PolicyPriorityUpdateDataInput!
  create: PolicyPriorityCreateInput!
}

input PolicyPriorityWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  theme: String
  theme_not: String
  theme_in: [String!]
  theme_not_in: [String!]
  theme_lt: String
  theme_lte: String
  theme_gt: String
  theme_gte: String
  theme_contains: String
  theme_not_contains: String
  theme_starts_with: String
  theme_not_starts_with: String
  theme_ends_with: String
  theme_not_ends_with: String
  AND: [PolicyPriorityWhereInput!]
  OR: [PolicyPriorityWhereInput!]
  NOT: [PolicyPriorityWhereInput!]
}

input PolicyPriorityWhereUniqueInput {
  id: ID
  name: String
}

enum ProjectType {
  LANGUAGE
  SOCIAL_MEDIA
}

enum PublishStatus {
  DRAFT
  PUBLISHING
  PUBLISH_FAILURE
  UNPUBLISH_FAILURE
  PUBLISH_SUCCESS
  UNPUBLISH_SUCCESS
  PUBLISHED
  EMBARGOED
}

type Query {
  bureau(where: BureauWhereUniqueInput!): Bureau
  bureaus(where: BureauWhereInput, orderBy: BureauOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bureau]!
  bureausConnection(where: BureauWhereInput, orderBy: BureauOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BureauConnection!
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  contentField(where: ContentFieldWhereUniqueInput!): ContentField
  contentFields(where: ContentFieldWhereInput, orderBy: ContentFieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContentField]!
  contentFieldsConnection(where: ContentFieldWhereInput, orderBy: ContentFieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContentFieldConnection!
  country(where: CountryWhereUniqueInput!): Country
  countries(where: CountryWhereInput, orderBy: CountryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Country]!
  countriesConnection(where: CountryWhereInput, orderBy: CountryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CountryConnection!
  dimensions(where: DimensionsWhereUniqueInput!): Dimensions
  dimensionses(where: DimensionsWhereInput, orderBy: DimensionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Dimensions]!
  dimensionsesConnection(where: DimensionsWhereInput, orderBy: DimensionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DimensionsConnection!
  documentConversionFormat(where: DocumentConversionFormatWhereUniqueInput!): DocumentConversionFormat
  documentConversionFormats(where: DocumentConversionFormatWhereInput, orderBy: DocumentConversionFormatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DocumentConversionFormat]!
  documentConversionFormatsConnection(where: DocumentConversionFormatWhereInput, orderBy: DocumentConversionFormatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DocumentConversionFormatConnection!
  documentFile(where: DocumentFileWhereUniqueInput!): DocumentFile
  documentFiles(where: DocumentFileWhereInput, orderBy: DocumentFileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DocumentFile]!
  documentFilesConnection(where: DocumentFileWhereInput, orderBy: DocumentFileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DocumentFileConnection!
  documentUse(where: DocumentUseWhereUniqueInput!): DocumentUse
  documentUses(where: DocumentUseWhereInput, orderBy: DocumentUseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DocumentUse]!
  documentUsesConnection(where: DocumentUseWhereInput, orderBy: DocumentUseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DocumentUseConnection!
  graphicProject(where: GraphicProjectWhereUniqueInput!): GraphicProject
  graphicProjects(where: GraphicProjectWhereInput, orderBy: GraphicProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GraphicProject]!
  graphicProjectsConnection(where: GraphicProjectWhereInput, orderBy: GraphicProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GraphicProjectConnection!
  graphicStyle(where: GraphicStyleWhereUniqueInput!): GraphicStyle
  graphicStyles(where: GraphicStyleWhereInput, orderBy: GraphicStyleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GraphicStyle]!
  graphicStylesConnection(where: GraphicStyleWhereInput, orderBy: GraphicStyleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GraphicStyleConnection!
  imageFile(where: ImageFileWhereUniqueInput!): ImageFile
  imageFiles(where: ImageFileWhereInput, orderBy: ImageFileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ImageFile]!
  imageFilesConnection(where: ImageFileWhereInput, orderBy: ImageFileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ImageFileConnection!
  imageUse(where: ImageUseWhereUniqueInput!): ImageUse
  imageUses(where: ImageUseWhereInput, orderBy: ImageUseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ImageUse]!
  imageUsesConnection(where: ImageUseWhereInput, orderBy: ImageUseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ImageUseConnection!
  language(where: LanguageWhereUniqueInput!): Language
  languages(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Language]!
  languagesConnection(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LanguageConnection!
  languageTranslation(where: LanguageTranslationWhereUniqueInput!): LanguageTranslation
  languageTranslations(where: LanguageTranslationWhereInput, orderBy: LanguageTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LanguageTranslation]!
  languageTranslationsConnection(where: LanguageTranslationWhereInput, orderBy: LanguageTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LanguageTranslationConnection!
  office(where: OfficeWhereUniqueInput!): Office
  offices(where: OfficeWhereInput, orderBy: OfficeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Office]!
  officesConnection(where: OfficeWhereInput, orderBy: OfficeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OfficeConnection!
  package(where: PackageWhereUniqueInput!): Package
  packages(where: PackageWhereInput, orderBy: PackageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Package]!
  packagesConnection(where: PackageWhereInput, orderBy: PackageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PackageConnection!
  playbook(where: PlaybookWhereUniqueInput!): Playbook
  playbooks(where: PlaybookWhereInput, orderBy: PlaybookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Playbook]!
  playbooksConnection(where: PlaybookWhereInput, orderBy: PlaybookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlaybookConnection!
  policyPriority(where: PolicyPriorityWhereUniqueInput!): PolicyPriority
  policyPriorities(where: PolicyPriorityWhereInput, orderBy: PolicyPriorityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PolicyPriority]!
  policyPrioritiesConnection(where: PolicyPriorityWhereInput, orderBy: PolicyPriorityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PolicyPriorityConnection!
  region(where: RegionWhereUniqueInput!): Region
  regions(where: RegionWhereInput, orderBy: RegionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Region]!
  regionsConnection(where: RegionWhereInput, orderBy: RegionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RegionConnection!
  socialPlatform(where: SocialPlatformWhereUniqueInput!): SocialPlatform
  socialPlatforms(where: SocialPlatformWhereInput, orderBy: SocialPlatformOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SocialPlatform]!
  socialPlatformsConnection(where: SocialPlatformWhereInput, orderBy: SocialPlatformOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SocialPlatformConnection!
  supportFile(where: SupportFileWhereUniqueInput!): SupportFile
  supportFiles(where: SupportFileWhereInput, orderBy: SupportFileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SupportFile]!
  supportFilesConnection(where: SupportFileWhereInput, orderBy: SupportFileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SupportFileConnection!
  supportFileUse(where: SupportFileUseWhereUniqueInput!): SupportFileUse
  supportFileUses(where: SupportFileUseWhereInput, orderBy: SupportFileUseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SupportFileUse]!
  supportFileUsesConnection(where: SupportFileUseWhereInput, orderBy: SupportFileUseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SupportFileUseConnection!
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag]!
  tagsConnection(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TagConnection!
  team(where: TeamWhereUniqueInput!): Team
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team]!
  teamsConnection(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeamConnection!
  thumbnail(where: ThumbnailWhereUniqueInput!): Thumbnail
  thumbnails(where: ThumbnailWhereInput, orderBy: ThumbnailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Thumbnail]!
  thumbnailsConnection(where: ThumbnailWhereInput, orderBy: ThumbnailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ThumbnailConnection!
  toolkit(where: ToolkitWhereUniqueInput!): Toolkit
  toolkits(where: ToolkitWhereInput, orderBy: ToolkitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Toolkit]!
  toolkitsConnection(where: ToolkitWhereInput, orderBy: ToolkitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ToolkitConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  videoFile(where: VideoFileWhereUniqueInput!): VideoFile
  videoFiles(where: VideoFileWhereInput, orderBy: VideoFileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VideoFile]!
  videoFilesConnection(where: VideoFileWhereInput, orderBy: VideoFileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VideoFileConnection!
  videoProject(where: VideoProjectWhereUniqueInput!): VideoProject
  videoProjects(where: VideoProjectWhereInput, orderBy: VideoProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VideoProject]!
  videoProjectsConnection(where: VideoProjectWhereInput, orderBy: VideoProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VideoProjectConnection!
  videoStream(where: VideoStreamWhereUniqueInput!): VideoStream
  videoStreams(where: VideoStreamWhereInput, orderBy: VideoStreamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VideoStream]!
  videoStreamsConnection(where: VideoStreamWhereInput, orderBy: VideoStreamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VideoStreamConnection!
  videoUnit(where: VideoUnitWhereUniqueInput!): VideoUnit
  videoUnits(where: VideoUnitWhereInput, orderBy: VideoUnitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VideoUnit]!
  videoUnitsConnection(where: VideoUnitWhereInput, orderBy: VideoUnitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VideoUnitConnection!
  videoUse(where: VideoUseWhereUniqueInput!): VideoUse
  videoUses(where: VideoUseWhereInput, orderBy: VideoUseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VideoUse]!
  videoUsesConnection(where: VideoUseWhereInput, orderBy: VideoUseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VideoUseConnection!
  node(id: ID!): Node
}

type Region {
  id: ID!
  name: String!
  abbr: String!
  countries(where: CountryWhereInput, orderBy: CountryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Country!]
}

type RegionConnection {
  pageInfo: PageInfo!
  edges: [RegionEdge]!
  aggregate: AggregateRegion!
}

input RegionCreateInput {
  id: ID
  name: String!
  abbr: String!
  countries: CountryCreateManyWithoutRegionInput
}

input RegionCreateOneWithoutCountriesInput {
  create: RegionCreateWithoutCountriesInput
  connect: RegionWhereUniqueInput
}

input RegionCreateWithoutCountriesInput {
  id: ID
  name: String!
  abbr: String!
}

type RegionEdge {
  node: Region!
  cursor: String!
}

enum RegionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  abbr_ASC
  abbr_DESC
}

type RegionPreviousValues {
  id: ID!
  name: String!
  abbr: String!
}

type RegionSubscriptionPayload {
  mutation: MutationType!
  node: Region
  updatedFields: [String!]
  previousValues: RegionPreviousValues
}

input RegionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RegionWhereInput
  AND: [RegionSubscriptionWhereInput!]
  OR: [RegionSubscriptionWhereInput!]
  NOT: [RegionSubscriptionWhereInput!]
}

input RegionUpdateInput {
  name: String
  abbr: String
  countries: CountryUpdateManyWithoutRegionInput
}

input RegionUpdateManyMutationInput {
  name: String
  abbr: String
}

input RegionUpdateOneWithoutCountriesInput {
  create: RegionCreateWithoutCountriesInput
  update: RegionUpdateWithoutCountriesDataInput
  upsert: RegionUpsertWithoutCountriesInput
  delete: Boolean
  disconnect: Boolean
  connect: RegionWhereUniqueInput
}

input RegionUpdateWithoutCountriesDataInput {
  name: String
  abbr: String
}

input RegionUpsertWithoutCountriesInput {
  update: RegionUpdateWithoutCountriesDataInput!
  create: RegionCreateWithoutCountriesInput!
}

input RegionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  abbr: String
  abbr_not: String
  abbr_in: [String!]
  abbr_not_in: [String!]
  abbr_lt: String
  abbr_lte: String
  abbr_gt: String
  abbr_gte: String
  abbr_contains: String
  abbr_not_contains: String
  abbr_starts_with: String
  abbr_not_starts_with: String
  abbr_ends_with: String
  abbr_not_ends_with: String
  countries_every: CountryWhereInput
  countries_some: CountryWhereInput
  countries_none: CountryWhereInput
  AND: [RegionWhereInput!]
  OR: [RegionWhereInput!]
  NOT: [RegionWhereInput!]
}

input RegionWhereUniqueInput {
  id: ID
}

type SocialPlatform {
  id: ID!
  name: String!
}

type SocialPlatformConnection {
  pageInfo: PageInfo!
  edges: [SocialPlatformEdge]!
  aggregate: AggregateSocialPlatform!
}

input SocialPlatformCreateInput {
  id: ID
  name: String!
}

input SocialPlatformCreateManyInput {
  create: [SocialPlatformCreateInput!]
  connect: [SocialPlatformWhereUniqueInput!]
}

type SocialPlatformEdge {
  node: SocialPlatform!
  cursor: String!
}

enum SocialPlatformOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type SocialPlatformPreviousValues {
  id: ID!
  name: String!
}

input SocialPlatformScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [SocialPlatformScalarWhereInput!]
  OR: [SocialPlatformScalarWhereInput!]
  NOT: [SocialPlatformScalarWhereInput!]
}

type SocialPlatformSubscriptionPayload {
  mutation: MutationType!
  node: SocialPlatform
  updatedFields: [String!]
  previousValues: SocialPlatformPreviousValues
}

input SocialPlatformSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SocialPlatformWhereInput
  AND: [SocialPlatformSubscriptionWhereInput!]
  OR: [SocialPlatformSubscriptionWhereInput!]
  NOT: [SocialPlatformSubscriptionWhereInput!]
}

input SocialPlatformUpdateDataInput {
  name: String
}

input SocialPlatformUpdateInput {
  name: String
}

input SocialPlatformUpdateManyDataInput {
  name: String
}

input SocialPlatformUpdateManyInput {
  create: [SocialPlatformCreateInput!]
  update: [SocialPlatformUpdateWithWhereUniqueNestedInput!]
  upsert: [SocialPlatformUpsertWithWhereUniqueNestedInput!]
  delete: [SocialPlatformWhereUniqueInput!]
  connect: [SocialPlatformWhereUniqueInput!]
  set: [SocialPlatformWhereUniqueInput!]
  disconnect: [SocialPlatformWhereUniqueInput!]
  deleteMany: [SocialPlatformScalarWhereInput!]
  updateMany: [SocialPlatformUpdateManyWithWhereNestedInput!]
}

input SocialPlatformUpdateManyMutationInput {
  name: String
}

input SocialPlatformUpdateManyWithWhereNestedInput {
  where: SocialPlatformScalarWhereInput!
  data: SocialPlatformUpdateManyDataInput!
}

input SocialPlatformUpdateWithWhereUniqueNestedInput {
  where: SocialPlatformWhereUniqueInput!
  data: SocialPlatformUpdateDataInput!
}

input SocialPlatformUpsertWithWhereUniqueNestedInput {
  where: SocialPlatformWhereUniqueInput!
  update: SocialPlatformUpdateDataInput!
  create: SocialPlatformCreateInput!
}

input SocialPlatformWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [SocialPlatformWhereInput!]
  OR: [SocialPlatformWhereInput!]
  NOT: [SocialPlatformWhereInput!]
}

input SocialPlatformWhereUniqueInput {
  id: ID
  name: String
}

type Subscription {
  bureau(where: BureauSubscriptionWhereInput): BureauSubscriptionPayload
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  contentField(where: ContentFieldSubscriptionWhereInput): ContentFieldSubscriptionPayload
  country(where: CountrySubscriptionWhereInput): CountrySubscriptionPayload
  dimensions(where: DimensionsSubscriptionWhereInput): DimensionsSubscriptionPayload
  documentConversionFormat(where: DocumentConversionFormatSubscriptionWhereInput): DocumentConversionFormatSubscriptionPayload
  documentFile(where: DocumentFileSubscriptionWhereInput): DocumentFileSubscriptionPayload
  documentUse(where: DocumentUseSubscriptionWhereInput): DocumentUseSubscriptionPayload
  graphicProject(where: GraphicProjectSubscriptionWhereInput): GraphicProjectSubscriptionPayload
  graphicStyle(where: GraphicStyleSubscriptionWhereInput): GraphicStyleSubscriptionPayload
  imageFile(where: ImageFileSubscriptionWhereInput): ImageFileSubscriptionPayload
  imageUse(where: ImageUseSubscriptionWhereInput): ImageUseSubscriptionPayload
  language(where: LanguageSubscriptionWhereInput): LanguageSubscriptionPayload
  languageTranslation(where: LanguageTranslationSubscriptionWhereInput): LanguageTranslationSubscriptionPayload
  office(where: OfficeSubscriptionWhereInput): OfficeSubscriptionPayload
  package(where: PackageSubscriptionWhereInput): PackageSubscriptionPayload
  playbook(where: PlaybookSubscriptionWhereInput): PlaybookSubscriptionPayload
  policyPriority(where: PolicyPrioritySubscriptionWhereInput): PolicyPrioritySubscriptionPayload
  region(where: RegionSubscriptionWhereInput): RegionSubscriptionPayload
  socialPlatform(where: SocialPlatformSubscriptionWhereInput): SocialPlatformSubscriptionPayload
  supportFile(where: SupportFileSubscriptionWhereInput): SupportFileSubscriptionPayload
  supportFileUse(where: SupportFileUseSubscriptionWhereInput): SupportFileUseSubscriptionPayload
  tag(where: TagSubscriptionWhereInput): TagSubscriptionPayload
  team(where: TeamSubscriptionWhereInput): TeamSubscriptionPayload
  thumbnail(where: ThumbnailSubscriptionWhereInput): ThumbnailSubscriptionPayload
  toolkit(where: ToolkitSubscriptionWhereInput): ToolkitSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  videoFile(where: VideoFileSubscriptionWhereInput): VideoFileSubscriptionPayload
  videoProject(where: VideoProjectSubscriptionWhereInput): VideoProjectSubscriptionPayload
  videoStream(where: VideoStreamSubscriptionWhereInput): VideoStreamSubscriptionPayload
  videoUnit(where: VideoUnitSubscriptionWhereInput): VideoUnitSubscriptionPayload
  videoUse(where: VideoUseSubscriptionWhereInput): VideoUseSubscriptionPayload
}

type SupportFile {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  language: Language!
  url: String
  signedUrl: String
  md5: String
  filename: String
  filetype: String
  filesize: Float
  visibility: Visibility
  editable: Boolean
  use: SupportFileUse
}

type SupportFileConnection {
  pageInfo: PageInfo!
  edges: [SupportFileEdge]!
  aggregate: AggregateSupportFile!
}

input SupportFileCreateInput {
  id: ID
  language: LanguageCreateOneInput!
  url: String
  signedUrl: String
  md5: String
  filename: String
  filetype: String
  filesize: Float
  visibility: Visibility
  editable: Boolean
  use: SupportFileUseCreateOneInput
}

input SupportFileCreateManyInput {
  create: [SupportFileCreateInput!]
  connect: [SupportFileWhereUniqueInput!]
}

type SupportFileEdge {
  node: SupportFile!
  cursor: String!
}

enum SupportFileOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  url_ASC
  url_DESC
  signedUrl_ASC
  signedUrl_DESC
  md5_ASC
  md5_DESC
  filename_ASC
  filename_DESC
  filetype_ASC
  filetype_DESC
  filesize_ASC
  filesize_DESC
  visibility_ASC
  visibility_DESC
  editable_ASC
  editable_DESC
}

type SupportFilePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  url: String
  signedUrl: String
  md5: String
  filename: String
  filetype: String
  filesize: Float
  visibility: Visibility
  editable: Boolean
}

input SupportFileScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  signedUrl: String
  signedUrl_not: String
  signedUrl_in: [String!]
  signedUrl_not_in: [String!]
  signedUrl_lt: String
  signedUrl_lte: String
  signedUrl_gt: String
  signedUrl_gte: String
  signedUrl_contains: String
  signedUrl_not_contains: String
  signedUrl_starts_with: String
  signedUrl_not_starts_with: String
  signedUrl_ends_with: String
  signedUrl_not_ends_with: String
  md5: String
  md5_not: String
  md5_in: [String!]
  md5_not_in: [String!]
  md5_lt: String
  md5_lte: String
  md5_gt: String
  md5_gte: String
  md5_contains: String
  md5_not_contains: String
  md5_starts_with: String
  md5_not_starts_with: String
  md5_ends_with: String
  md5_not_ends_with: String
  filename: String
  filename_not: String
  filename_in: [String!]
  filename_not_in: [String!]
  filename_lt: String
  filename_lte: String
  filename_gt: String
  filename_gte: String
  filename_contains: String
  filename_not_contains: String
  filename_starts_with: String
  filename_not_starts_with: String
  filename_ends_with: String
  filename_not_ends_with: String
  filetype: String
  filetype_not: String
  filetype_in: [String!]
  filetype_not_in: [String!]
  filetype_lt: String
  filetype_lte: String
  filetype_gt: String
  filetype_gte: String
  filetype_contains: String
  filetype_not_contains: String
  filetype_starts_with: String
  filetype_not_starts_with: String
  filetype_ends_with: String
  filetype_not_ends_with: String
  filesize: Float
  filesize_not: Float
  filesize_in: [Float!]
  filesize_not_in: [Float!]
  filesize_lt: Float
  filesize_lte: Float
  filesize_gt: Float
  filesize_gte: Float
  visibility: Visibility
  visibility_not: Visibility
  visibility_in: [Visibility!]
  visibility_not_in: [Visibility!]
  editable: Boolean
  editable_not: Boolean
  AND: [SupportFileScalarWhereInput!]
  OR: [SupportFileScalarWhereInput!]
  NOT: [SupportFileScalarWhereInput!]
}

type SupportFileSubscriptionPayload {
  mutation: MutationType!
  node: SupportFile
  updatedFields: [String!]
  previousValues: SupportFilePreviousValues
}

input SupportFileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SupportFileWhereInput
  AND: [SupportFileSubscriptionWhereInput!]
  OR: [SupportFileSubscriptionWhereInput!]
  NOT: [SupportFileSubscriptionWhereInput!]
}

input SupportFileUpdateDataInput {
  language: LanguageUpdateOneRequiredInput
  url: String
  signedUrl: String
  md5: String
  filename: String
  filetype: String
  filesize: Float
  visibility: Visibility
  editable: Boolean
  use: SupportFileUseUpdateOneInput
}

input SupportFileUpdateInput {
  language: LanguageUpdateOneRequiredInput
  url: String
  signedUrl: String
  md5: String
  filename: String
  filetype: String
  filesize: Float
  visibility: Visibility
  editable: Boolean
  use: SupportFileUseUpdateOneInput
}

input SupportFileUpdateManyDataInput {
  url: String
  signedUrl: String
  md5: String
  filename: String
  filetype: String
  filesize: Float
  visibility: Visibility
  editable: Boolean
}

input SupportFileUpdateManyInput {
  create: [SupportFileCreateInput!]
  update: [SupportFileUpdateWithWhereUniqueNestedInput!]
  upsert: [SupportFileUpsertWithWhereUniqueNestedInput!]
  delete: [SupportFileWhereUniqueInput!]
  connect: [SupportFileWhereUniqueInput!]
  set: [SupportFileWhereUniqueInput!]
  disconnect: [SupportFileWhereUniqueInput!]
  deleteMany: [SupportFileScalarWhereInput!]
  updateMany: [SupportFileUpdateManyWithWhereNestedInput!]
}

input SupportFileUpdateManyMutationInput {
  url: String
  signedUrl: String
  md5: String
  filename: String
  filetype: String
  filesize: Float
  visibility: Visibility
  editable: Boolean
}

input SupportFileUpdateManyWithWhereNestedInput {
  where: SupportFileScalarWhereInput!
  data: SupportFileUpdateManyDataInput!
}

input SupportFileUpdateWithWhereUniqueNestedInput {
  where: SupportFileWhereUniqueInput!
  data: SupportFileUpdateDataInput!
}

input SupportFileUpsertWithWhereUniqueNestedInput {
  where: SupportFileWhereUniqueInput!
  update: SupportFileUpdateDataInput!
  create: SupportFileCreateInput!
}

type SupportFileUse {
  id: ID!
  name: String!
}

type SupportFileUseConnection {
  pageInfo: PageInfo!
  edges: [SupportFileUseEdge]!
  aggregate: AggregateSupportFileUse!
}

input SupportFileUseCreateInput {
  id: ID
  name: String!
}

input SupportFileUseCreateOneInput {
  create: SupportFileUseCreateInput
  connect: SupportFileUseWhereUniqueInput
}

type SupportFileUseEdge {
  node: SupportFileUse!
  cursor: String!
}

enum SupportFileUseOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type SupportFileUsePreviousValues {
  id: ID!
  name: String!
}

type SupportFileUseSubscriptionPayload {
  mutation: MutationType!
  node: SupportFileUse
  updatedFields: [String!]
  previousValues: SupportFileUsePreviousValues
}

input SupportFileUseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SupportFileUseWhereInput
  AND: [SupportFileUseSubscriptionWhereInput!]
  OR: [SupportFileUseSubscriptionWhereInput!]
  NOT: [SupportFileUseSubscriptionWhereInput!]
}

input SupportFileUseUpdateDataInput {
  name: String
}

input SupportFileUseUpdateInput {
  name: String
}

input SupportFileUseUpdateManyMutationInput {
  name: String
}

input SupportFileUseUpdateOneInput {
  create: SupportFileUseCreateInput
  update: SupportFileUseUpdateDataInput
  upsert: SupportFileUseUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: SupportFileUseWhereUniqueInput
}

input SupportFileUseUpsertNestedInput {
  update: SupportFileUseUpdateDataInput!
  create: SupportFileUseCreateInput!
}

input SupportFileUseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [SupportFileUseWhereInput!]
  OR: [SupportFileUseWhereInput!]
  NOT: [SupportFileUseWhereInput!]
}

input SupportFileUseWhereUniqueInput {
  id: ID
  name: String
}

input SupportFileWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  language: LanguageWhereInput
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  signedUrl: String
  signedUrl_not: String
  signedUrl_in: [String!]
  signedUrl_not_in: [String!]
  signedUrl_lt: String
  signedUrl_lte: String
  signedUrl_gt: String
  signedUrl_gte: String
  signedUrl_contains: String
  signedUrl_not_contains: String
  signedUrl_starts_with: String
  signedUrl_not_starts_with: String
  signedUrl_ends_with: String
  signedUrl_not_ends_with: String
  md5: String
  md5_not: String
  md5_in: [String!]
  md5_not_in: [String!]
  md5_lt: String
  md5_lte: String
  md5_gt: String
  md5_gte: String
  md5_contains: String
  md5_not_contains: String
  md5_starts_with: String
  md5_not_starts_with: String
  md5_ends_with: String
  md5_not_ends_with: String
  filename: String
  filename_not: String
  filename_in: [String!]
  filename_not_in: [String!]
  filename_lt: String
  filename_lte: String
  filename_gt: String
  filename_gte: String
  filename_contains: String
  filename_not_contains: String
  filename_starts_with: String
  filename_not_starts_with: String
  filename_ends_with: String
  filename_not_ends_with: String
  filetype: String
  filetype_not: String
  filetype_in: [String!]
  filetype_not_in: [String!]
  filetype_lt: String
  filetype_lte: String
  filetype_gt: String
  filetype_gte: String
  filetype_contains: String
  filetype_not_contains: String
  filetype_starts_with: String
  filetype_not_starts_with: String
  filetype_ends_with: String
  filetype_not_ends_with: String
  filesize: Float
  filesize_not: Float
  filesize_in: [Float!]
  filesize_not_in: [Float!]
  filesize_lt: Float
  filesize_lte: Float
  filesize_gt: Float
  filesize_gte: Float
  visibility: Visibility
  visibility_not: Visibility
  visibility_in: [Visibility!]
  visibility_not_in: [Visibility!]
  editable: Boolean
  editable_not: Boolean
  use: SupportFileUseWhereInput
  AND: [SupportFileWhereInput!]
  OR: [SupportFileWhereInput!]
  NOT: [SupportFileWhereInput!]
}

input SupportFileWhereUniqueInput {
  id: ID
}

type Tag {
  id: ID!
  translations(where: LanguageTranslationWhereInput, orderBy: LanguageTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LanguageTranslation!]
}

type TagConnection {
  pageInfo: PageInfo!
  edges: [TagEdge]!
  aggregate: AggregateTag!
}

input TagCreateInput {
  id: ID
  translations: LanguageTranslationCreateManyInput
}

input TagCreateManyInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type TagEdge {
  node: Tag!
  cursor: String!
}

enum TagOrderByInput {
  id_ASC
  id_DESC
}

type TagPreviousValues {
  id: ID!
}

input TagScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  NOT: [TagScalarWhereInput!]
}

type TagSubscriptionPayload {
  mutation: MutationType!
  node: Tag
  updatedFields: [String!]
  previousValues: TagPreviousValues
}

input TagSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TagWhereInput
  AND: [TagSubscriptionWhereInput!]
  OR: [TagSubscriptionWhereInput!]
  NOT: [TagSubscriptionWhereInput!]
}

input TagUpdateDataInput {
  translations: LanguageTranslationUpdateManyInput
}

input TagUpdateInput {
  translations: LanguageTranslationUpdateManyInput
}

input TagUpdateManyInput {
  create: [TagCreateInput!]
  update: [TagUpdateWithWhereUniqueNestedInput!]
  upsert: [TagUpsertWithWhereUniqueNestedInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  deleteMany: [TagScalarWhereInput!]
}

input TagUpdateWithWhereUniqueNestedInput {
  where: TagWhereUniqueInput!
  data: TagUpdateDataInput!
}

input TagUpsertWithWhereUniqueNestedInput {
  where: TagWhereUniqueInput!
  update: TagUpdateDataInput!
  create: TagCreateInput!
}

input TagWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  translations_every: LanguageTranslationWhereInput
  translations_some: LanguageTranslationWhereInput
  translations_none: LanguageTranslationWhereInput
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
}

input TagWhereUniqueInput {
  id: ID
}

type Team {
  id: ID!
  name: String!
  organization: String!
  members(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  contentTypes: [ContentType!]!
  isConfirmed: Boolean!
}

type TeamConnection {
  pageInfo: PageInfo!
  edges: [TeamEdge]!
  aggregate: AggregateTeam!
}

input TeamCreatecontentTypesInput {
  set: [ContentType!]
}

input TeamCreateInput {
  id: ID
  name: String!
  organization: String!
  members: UserCreateManyWithoutTeamInput
  contentTypes: TeamCreatecontentTypesInput
  isConfirmed: Boolean
}

input TeamCreateOneInput {
  create: TeamCreateInput
  connect: TeamWhereUniqueInput
}

input TeamCreateOneWithoutMembersInput {
  create: TeamCreateWithoutMembersInput
  connect: TeamWhereUniqueInput
}

input TeamCreateWithoutMembersInput {
  id: ID
  name: String!
  organization: String!
  contentTypes: TeamCreatecontentTypesInput
  isConfirmed: Boolean
}

type TeamEdge {
  node: Team!
  cursor: String!
}

enum TeamOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  organization_ASC
  organization_DESC
  isConfirmed_ASC
  isConfirmed_DESC
}

type TeamPreviousValues {
  id: ID!
  name: String!
  organization: String!
  contentTypes: [ContentType!]!
  isConfirmed: Boolean!
}

type TeamSubscriptionPayload {
  mutation: MutationType!
  node: Team
  updatedFields: [String!]
  previousValues: TeamPreviousValues
}

input TeamSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TeamWhereInput
  AND: [TeamSubscriptionWhereInput!]
  OR: [TeamSubscriptionWhereInput!]
  NOT: [TeamSubscriptionWhereInput!]
}

input TeamUpdatecontentTypesInput {
  set: [ContentType!]
}

input TeamUpdateDataInput {
  name: String
  organization: String
  members: UserUpdateManyWithoutTeamInput
  contentTypes: TeamUpdatecontentTypesInput
  isConfirmed: Boolean
}

input TeamUpdateInput {
  name: String
  organization: String
  members: UserUpdateManyWithoutTeamInput
  contentTypes: TeamUpdatecontentTypesInput
  isConfirmed: Boolean
}

input TeamUpdateManyMutationInput {
  name: String
  organization: String
  contentTypes: TeamUpdatecontentTypesInput
  isConfirmed: Boolean
}

input TeamUpdateOneInput {
  create: TeamCreateInput
  update: TeamUpdateDataInput
  upsert: TeamUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: TeamWhereUniqueInput
}

input TeamUpdateOneWithoutMembersInput {
  create: TeamCreateWithoutMembersInput
  update: TeamUpdateWithoutMembersDataInput
  upsert: TeamUpsertWithoutMembersInput
  delete: Boolean
  disconnect: Boolean
  connect: TeamWhereUniqueInput
}

input TeamUpdateWithoutMembersDataInput {
  name: String
  organization: String
  contentTypes: TeamUpdatecontentTypesInput
  isConfirmed: Boolean
}

input TeamUpsertNestedInput {
  update: TeamUpdateDataInput!
  create: TeamCreateInput!
}

input TeamUpsertWithoutMembersInput {
  update: TeamUpdateWithoutMembersDataInput!
  create: TeamCreateWithoutMembersInput!
}

input TeamWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  organization: String
  organization_not: String
  organization_in: [String!]
  organization_not_in: [String!]
  organization_lt: String
  organization_lte: String
  organization_gt: String
  organization_gte: String
  organization_contains: String
  organization_not_contains: String
  organization_starts_with: String
  organization_not_starts_with: String
  organization_ends_with: String
  organization_not_ends_with: String
  members_every: UserWhereInput
  members_some: UserWhereInput
  members_none: UserWhereInput
  isConfirmed: Boolean
  isConfirmed_not: Boolean
  AND: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  NOT: [TeamWhereInput!]
}

input TeamWhereUniqueInput {
  id: ID
  name: String
}

enum TextDirection {
  LTR
  RTL
}

type Thumbnail {
  id: ID!
  size: ThumbnailSize
  image: ImageFile
}

type ThumbnailConnection {
  pageInfo: PageInfo!
  edges: [ThumbnailEdge]!
  aggregate: AggregateThumbnail!
}

input ThumbnailCreateInput {
  id: ID
  size: ThumbnailSize
  image: ImageFileCreateOneInput
}

input ThumbnailCreateManyInput {
  create: [ThumbnailCreateInput!]
  connect: [ThumbnailWhereUniqueInput!]
}

type ThumbnailEdge {
  node: Thumbnail!
  cursor: String!
}

enum ThumbnailOrderByInput {
  id_ASC
  id_DESC
  size_ASC
  size_DESC
}

type ThumbnailPreviousValues {
  id: ID!
  size: ThumbnailSize
}

input ThumbnailScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  size: ThumbnailSize
  size_not: ThumbnailSize
  size_in: [ThumbnailSize!]
  size_not_in: [ThumbnailSize!]
  AND: [ThumbnailScalarWhereInput!]
  OR: [ThumbnailScalarWhereInput!]
  NOT: [ThumbnailScalarWhereInput!]
}

enum ThumbnailSize {
  SMALL
  MEDIUM
  LARGE
  FULL
}

type ThumbnailSubscriptionPayload {
  mutation: MutationType!
  node: Thumbnail
  updatedFields: [String!]
  previousValues: ThumbnailPreviousValues
}

input ThumbnailSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ThumbnailWhereInput
  AND: [ThumbnailSubscriptionWhereInput!]
  OR: [ThumbnailSubscriptionWhereInput!]
  NOT: [ThumbnailSubscriptionWhereInput!]
}

input ThumbnailUpdateDataInput {
  size: ThumbnailSize
  image: ImageFileUpdateOneInput
}

input ThumbnailUpdateInput {
  size: ThumbnailSize
  image: ImageFileUpdateOneInput
}

input ThumbnailUpdateManyDataInput {
  size: ThumbnailSize
}

input ThumbnailUpdateManyInput {
  create: [ThumbnailCreateInput!]
  update: [ThumbnailUpdateWithWhereUniqueNestedInput!]
  upsert: [ThumbnailUpsertWithWhereUniqueNestedInput!]
  delete: [ThumbnailWhereUniqueInput!]
  connect: [ThumbnailWhereUniqueInput!]
  set: [ThumbnailWhereUniqueInput!]
  disconnect: [ThumbnailWhereUniqueInput!]
  deleteMany: [ThumbnailScalarWhereInput!]
  updateMany: [ThumbnailUpdateManyWithWhereNestedInput!]
}

input ThumbnailUpdateManyMutationInput {
  size: ThumbnailSize
}

input ThumbnailUpdateManyWithWhereNestedInput {
  where: ThumbnailScalarWhereInput!
  data: ThumbnailUpdateManyDataInput!
}

input ThumbnailUpdateWithWhereUniqueNestedInput {
  where: ThumbnailWhereUniqueInput!
  data: ThumbnailUpdateDataInput!
}

input ThumbnailUpsertWithWhereUniqueNestedInput {
  where: ThumbnailWhereUniqueInput!
  update: ThumbnailUpdateDataInput!
  create: ThumbnailCreateInput!
}

input ThumbnailWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  size: ThumbnailSize
  size_not: ThumbnailSize
  size_in: [ThumbnailSize!]
  size_not_in: [ThumbnailSize!]
  image: ImageFileWhereInput
  AND: [ThumbnailWhereInput!]
  OR: [ThumbnailWhereInput!]
  NOT: [ThumbnailWhereInput!]
}

input ThumbnailWhereUniqueInput {
  id: ID
}

type Toolkit {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  type: PackageType!
  title: String!
  assetPath: String
  author: User
  team: Team
  desc: String
  status: PublishStatus
  visibility: Visibility
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category!]
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  content: DocumentConversionFormat
  policy: PolicyPriority
  supportFiles(where: SupportFileWhereInput, orderBy: SupportFileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SupportFile!]
}

type ToolkitConnection {
  pageInfo: PageInfo!
  edges: [ToolkitEdge]!
  aggregate: AggregateToolkit!
}

input ToolkitCreateInput {
  id: ID
  publishedAt: DateTime
  type: PackageType!
  title: String!
  assetPath: String
  author: UserCreateOneInput
  team: TeamCreateOneInput
  desc: String
  status: PublishStatus
  visibility: Visibility
  categories: CategoryCreateManyInput
  tags: TagCreateManyInput
  content: DocumentConversionFormatCreateOneInput
  policy: PolicyPriorityCreateOneInput
  supportFiles: SupportFileCreateManyInput
}

type ToolkitEdge {
  node: Toolkit!
  cursor: String!
}

enum ToolkitOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  type_ASC
  type_DESC
  title_ASC
  title_DESC
  assetPath_ASC
  assetPath_DESC
  desc_ASC
  desc_DESC
  status_ASC
  status_DESC
  visibility_ASC
  visibility_DESC
}

type ToolkitPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  type: PackageType!
  title: String!
  assetPath: String
  desc: String
  status: PublishStatus
  visibility: Visibility
}

type ToolkitSubscriptionPayload {
  mutation: MutationType!
  node: Toolkit
  updatedFields: [String!]
  previousValues: ToolkitPreviousValues
}

input ToolkitSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ToolkitWhereInput
  AND: [ToolkitSubscriptionWhereInput!]
  OR: [ToolkitSubscriptionWhereInput!]
  NOT: [ToolkitSubscriptionWhereInput!]
}

input ToolkitUpdateInput {
  publishedAt: DateTime
  type: PackageType
  title: String
  assetPath: String
  author: UserUpdateOneInput
  team: TeamUpdateOneInput
  desc: String
  status: PublishStatus
  visibility: Visibility
  categories: CategoryUpdateManyInput
  tags: TagUpdateManyInput
  content: DocumentConversionFormatUpdateOneInput
  policy: PolicyPriorityUpdateOneInput
  supportFiles: SupportFileUpdateManyInput
}

input ToolkitUpdateManyMutationInput {
  publishedAt: DateTime
  type: PackageType
  title: String
  assetPath: String
  desc: String
  status: PublishStatus
  visibility: Visibility
}

input ToolkitWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  type: PackageType
  type_not: PackageType
  type_in: [PackageType!]
  type_not_in: [PackageType!]
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  assetPath: String
  assetPath_not: String
  assetPath_in: [String!]
  assetPath_not_in: [String!]
  assetPath_lt: String
  assetPath_lte: String
  assetPath_gt: String
  assetPath_gte: String
  assetPath_contains: String
  assetPath_not_contains: String
  assetPath_starts_with: String
  assetPath_not_starts_with: String
  assetPath_ends_with: String
  assetPath_not_ends_with: String
  author: UserWhereInput
  team: TeamWhereInput
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  status: PublishStatus
  status_not: PublishStatus
  status_in: [PublishStatus!]
  status_not_in: [PublishStatus!]
  visibility: Visibility
  visibility_not: Visibility
  visibility_in: [Visibility!]
  visibility_not_in: [Visibility!]
  categories_every: CategoryWhereInput
  categories_some: CategoryWhereInput
  categories_none: CategoryWhereInput
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  content: DocumentConversionFormatWhereInput
  policy: PolicyPriorityWhereInput
  supportFiles_every: SupportFileWhereInput
  supportFiles_some: SupportFileWhereInput
  supportFiles_none: SupportFileWhereInput
  AND: [ToolkitWhereInput!]
  OR: [ToolkitWhereInput!]
  NOT: [ToolkitWhereInput!]
}

input ToolkitWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  password: String
  tempToken: String
  tempTokenExpiry: Float
  jobTitle: String
  country: String
  city: String
  howHeard: String
  permissions: [Permission!]!
  team: Team
  isConfirmed: Boolean!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  firstName: String!
  lastName: String!
  email: String!
  password: String
  tempToken: String
  tempTokenExpiry: Float
  jobTitle: String
  country: String
  city: String
  howHeard: String
  permissions: UserCreatepermissionsInput
  team: TeamCreateOneWithoutMembersInput
  isConfirmed: Boolean
}

input UserCreateManyWithoutTeamInput {
  create: [UserCreateWithoutTeamInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

input UserCreateWithoutTeamInput {
  id: ID
  firstName: String!
  lastName: String!
  email: String!
  password: String
  tempToken: String
  tempTokenExpiry: Float
  jobTitle: String
  country: String
  city: String
  howHeard: String
  permissions: UserCreatepermissionsInput
  isConfirmed: Boolean
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  tempToken_ASC
  tempToken_DESC
  tempTokenExpiry_ASC
  tempTokenExpiry_DESC
  jobTitle_ASC
  jobTitle_DESC
  country_ASC
  country_DESC
  city_ASC
  city_DESC
  howHeard_ASC
  howHeard_DESC
  isConfirmed_ASC
  isConfirmed_DESC
}

type UserPreviousValues {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  password: String
  tempToken: String
  tempTokenExpiry: Float
  jobTitle: String
  country: String
  city: String
  howHeard: String
  permissions: [Permission!]!
  isConfirmed: Boolean!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  tempToken: String
  tempToken_not: String
  tempToken_in: [String!]
  tempToken_not_in: [String!]
  tempToken_lt: String
  tempToken_lte: String
  tempToken_gt: String
  tempToken_gte: String
  tempToken_contains: String
  tempToken_not_contains: String
  tempToken_starts_with: String
  tempToken_not_starts_with: String
  tempToken_ends_with: String
  tempToken_not_ends_with: String
  tempTokenExpiry: Float
  tempTokenExpiry_not: Float
  tempTokenExpiry_in: [Float!]
  tempTokenExpiry_not_in: [Float!]
  tempTokenExpiry_lt: Float
  tempTokenExpiry_lte: Float
  tempTokenExpiry_gt: Float
  tempTokenExpiry_gte: Float
  jobTitle: String
  jobTitle_not: String
  jobTitle_in: [String!]
  jobTitle_not_in: [String!]
  jobTitle_lt: String
  jobTitle_lte: String
  jobTitle_gt: String
  jobTitle_gte: String
  jobTitle_contains: String
  jobTitle_not_contains: String
  jobTitle_starts_with: String
  jobTitle_not_starts_with: String
  jobTitle_ends_with: String
  jobTitle_not_ends_with: String
  country: String
  country_not: String
  country_in: [String!]
  country_not_in: [String!]
  country_lt: String
  country_lte: String
  country_gt: String
  country_gte: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  howHeard: String
  howHeard_not: String
  howHeard_in: [String!]
  howHeard_not_in: [String!]
  howHeard_lt: String
  howHeard_lte: String
  howHeard_gt: String
  howHeard_gte: String
  howHeard_contains: String
  howHeard_not_contains: String
  howHeard_starts_with: String
  howHeard_not_starts_with: String
  howHeard_ends_with: String
  howHeard_not_ends_with: String
  isConfirmed: Boolean
  isConfirmed_not: Boolean
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  tempToken: String
  tempTokenExpiry: Float
  jobTitle: String
  country: String
  city: String
  howHeard: String
  permissions: UserUpdatepermissionsInput
  team: TeamUpdateOneWithoutMembersInput
  isConfirmed: Boolean
}

input UserUpdateInput {
  firstName: String
  lastName: String
  email: String
  password: String
  tempToken: String
  tempTokenExpiry: Float
  jobTitle: String
  country: String
  city: String
  howHeard: String
  permissions: UserUpdatepermissionsInput
  team: TeamUpdateOneWithoutMembersInput
  isConfirmed: Boolean
}

input UserUpdateManyDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  tempToken: String
  tempTokenExpiry: Float
  jobTitle: String
  country: String
  city: String
  howHeard: String
  permissions: UserUpdatepermissionsInput
  isConfirmed: Boolean
}

input UserUpdateManyMutationInput {
  firstName: String
  lastName: String
  email: String
  password: String
  tempToken: String
  tempTokenExpiry: Float
  jobTitle: String
  country: String
  city: String
  howHeard: String
  permissions: UserUpdatepermissionsInput
  isConfirmed: Boolean
}

input UserUpdateManyWithoutTeamInput {
  create: [UserCreateWithoutTeamInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTeamInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTeamInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpdateWithoutTeamDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  tempToken: String
  tempTokenExpiry: Float
  jobTitle: String
  country: String
  city: String
  howHeard: String
  permissions: UserUpdatepermissionsInput
  isConfirmed: Boolean
}

input UserUpdateWithWhereUniqueWithoutTeamInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTeamDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithWhereUniqueWithoutTeamInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTeamDataInput!
  create: UserCreateWithoutTeamInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  tempToken: String
  tempToken_not: String
  tempToken_in: [String!]
  tempToken_not_in: [String!]
  tempToken_lt: String
  tempToken_lte: String
  tempToken_gt: String
  tempToken_gte: String
  tempToken_contains: String
  tempToken_not_contains: String
  tempToken_starts_with: String
  tempToken_not_starts_with: String
  tempToken_ends_with: String
  tempToken_not_ends_with: String
  tempTokenExpiry: Float
  tempTokenExpiry_not: Float
  tempTokenExpiry_in: [Float!]
  tempTokenExpiry_not_in: [Float!]
  tempTokenExpiry_lt: Float
  tempTokenExpiry_lte: Float
  tempTokenExpiry_gt: Float
  tempTokenExpiry_gte: Float
  jobTitle: String
  jobTitle_not: String
  jobTitle_in: [String!]
  jobTitle_not_in: [String!]
  jobTitle_lt: String
  jobTitle_lte: String
  jobTitle_gt: String
  jobTitle_gte: String
  jobTitle_contains: String
  jobTitle_not_contains: String
  jobTitle_starts_with: String
  jobTitle_not_starts_with: String
  jobTitle_ends_with: String
  jobTitle_not_ends_with: String
  country: String
  country_not: String
  country_in: [String!]
  country_not_in: [String!]
  country_lt: String
  country_lte: String
  country_gt: String
  country_gte: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  howHeard: String
  howHeard_not: String
  howHeard_in: [String!]
  howHeard_not_in: [String!]
  howHeard_lt: String
  howHeard_lte: String
  howHeard_gt: String
  howHeard_gte: String
  howHeard_contains: String
  howHeard_not_contains: String
  howHeard_starts_with: String
  howHeard_not_starts_with: String
  howHeard_ends_with: String
  howHeard_not_ends_with: String
  team: TeamWhereInput
  isConfirmed: Boolean
  isConfirmed_not: Boolean
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

enum VideoBurnedInStatus {
  SUBTITLED
  CAPTIONED
  CLEAN
}

type VideoFile {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  language: Language
  filetype: String
  filename: String
  visibility: Visibility
  use: VideoUse
  quality: VideoQuality
  videoBurnedInStatus: VideoBurnedInStatus
  url: String
  signedUrl: String
  md5: String
  duration: Float
  bitrate: Float
  filesize: Float
  dimensions: Dimensions
  stream(where: VideoStreamWhereInput, orderBy: VideoStreamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VideoStream!]
}

type VideoFileConnection {
  pageInfo: PageInfo!
  edges: [VideoFileEdge]!
  aggregate: AggregateVideoFile!
}

input VideoFileCreateInput {
  id: ID
  language: LanguageCreateOneInput
  filetype: String
  filename: String
  visibility: Visibility
  use: VideoUseCreateOneInput
  quality: VideoQuality
  videoBurnedInStatus: VideoBurnedInStatus
  url: String
  signedUrl: String
  md5: String
  duration: Float
  bitrate: Float
  filesize: Float
  dimensions: DimensionsCreateOneInput
  stream: VideoStreamCreateManyInput
}

input VideoFileCreateManyInput {
  create: [VideoFileCreateInput!]
  connect: [VideoFileWhereUniqueInput!]
}

type VideoFileEdge {
  node: VideoFile!
  cursor: String!
}

enum VideoFileOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  filetype_ASC
  filetype_DESC
  filename_ASC
  filename_DESC
  visibility_ASC
  visibility_DESC
  quality_ASC
  quality_DESC
  videoBurnedInStatus_ASC
  videoBurnedInStatus_DESC
  url_ASC
  url_DESC
  signedUrl_ASC
  signedUrl_DESC
  md5_ASC
  md5_DESC
  duration_ASC
  duration_DESC
  bitrate_ASC
  bitrate_DESC
  filesize_ASC
  filesize_DESC
}

type VideoFilePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  filetype: String
  filename: String
  visibility: Visibility
  quality: VideoQuality
  videoBurnedInStatus: VideoBurnedInStatus
  url: String
  signedUrl: String
  md5: String
  duration: Float
  bitrate: Float
  filesize: Float
}

input VideoFileScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  filetype: String
  filetype_not: String
  filetype_in: [String!]
  filetype_not_in: [String!]
  filetype_lt: String
  filetype_lte: String
  filetype_gt: String
  filetype_gte: String
  filetype_contains: String
  filetype_not_contains: String
  filetype_starts_with: String
  filetype_not_starts_with: String
  filetype_ends_with: String
  filetype_not_ends_with: String
  filename: String
  filename_not: String
  filename_in: [String!]
  filename_not_in: [String!]
  filename_lt: String
  filename_lte: String
  filename_gt: String
  filename_gte: String
  filename_contains: String
  filename_not_contains: String
  filename_starts_with: String
  filename_not_starts_with: String
  filename_ends_with: String
  filename_not_ends_with: String
  visibility: Visibility
  visibility_not: Visibility
  visibility_in: [Visibility!]
  visibility_not_in: [Visibility!]
  quality: VideoQuality
  quality_not: VideoQuality
  quality_in: [VideoQuality!]
  quality_not_in: [VideoQuality!]
  videoBurnedInStatus: VideoBurnedInStatus
  videoBurnedInStatus_not: VideoBurnedInStatus
  videoBurnedInStatus_in: [VideoBurnedInStatus!]
  videoBurnedInStatus_not_in: [VideoBurnedInStatus!]
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  signedUrl: String
  signedUrl_not: String
  signedUrl_in: [String!]
  signedUrl_not_in: [String!]
  signedUrl_lt: String
  signedUrl_lte: String
  signedUrl_gt: String
  signedUrl_gte: String
  signedUrl_contains: String
  signedUrl_not_contains: String
  signedUrl_starts_with: String
  signedUrl_not_starts_with: String
  signedUrl_ends_with: String
  signedUrl_not_ends_with: String
  md5: String
  md5_not: String
  md5_in: [String!]
  md5_not_in: [String!]
  md5_lt: String
  md5_lte: String
  md5_gt: String
  md5_gte: String
  md5_contains: String
  md5_not_contains: String
  md5_starts_with: String
  md5_not_starts_with: String
  md5_ends_with: String
  md5_not_ends_with: String
  duration: Float
  duration_not: Float
  duration_in: [Float!]
  duration_not_in: [Float!]
  duration_lt: Float
  duration_lte: Float
  duration_gt: Float
  duration_gte: Float
  bitrate: Float
  bitrate_not: Float
  bitrate_in: [Float!]
  bitrate_not_in: [Float!]
  bitrate_lt: Float
  bitrate_lte: Float
  bitrate_gt: Float
  bitrate_gte: Float
  filesize: Float
  filesize_not: Float
  filesize_in: [Float!]
  filesize_not_in: [Float!]
  filesize_lt: Float
  filesize_lte: Float
  filesize_gt: Float
  filesize_gte: Float
  AND: [VideoFileScalarWhereInput!]
  OR: [VideoFileScalarWhereInput!]
  NOT: [VideoFileScalarWhereInput!]
}

type VideoFileSubscriptionPayload {
  mutation: MutationType!
  node: VideoFile
  updatedFields: [String!]
  previousValues: VideoFilePreviousValues
}

input VideoFileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VideoFileWhereInput
  AND: [VideoFileSubscriptionWhereInput!]
  OR: [VideoFileSubscriptionWhereInput!]
  NOT: [VideoFileSubscriptionWhereInput!]
}

input VideoFileUpdateDataInput {
  language: LanguageUpdateOneInput
  filetype: String
  filename: String
  visibility: Visibility
  use: VideoUseUpdateOneInput
  quality: VideoQuality
  videoBurnedInStatus: VideoBurnedInStatus
  url: String
  signedUrl: String
  md5: String
  duration: Float
  bitrate: Float
  filesize: Float
  dimensions: DimensionsUpdateOneInput
  stream: VideoStreamUpdateManyInput
}

input VideoFileUpdateInput {
  language: LanguageUpdateOneInput
  filetype: String
  filename: String
  visibility: Visibility
  use: VideoUseUpdateOneInput
  quality: VideoQuality
  videoBurnedInStatus: VideoBurnedInStatus
  url: String
  signedUrl: String
  md5: String
  duration: Float
  bitrate: Float
  filesize: Float
  dimensions: DimensionsUpdateOneInput
  stream: VideoStreamUpdateManyInput
}

input VideoFileUpdateManyDataInput {
  filetype: String
  filename: String
  visibility: Visibility
  quality: VideoQuality
  videoBurnedInStatus: VideoBurnedInStatus
  url: String
  signedUrl: String
  md5: String
  duration: Float
  bitrate: Float
  filesize: Float
}

input VideoFileUpdateManyInput {
  create: [VideoFileCreateInput!]
  update: [VideoFileUpdateWithWhereUniqueNestedInput!]
  upsert: [VideoFileUpsertWithWhereUniqueNestedInput!]
  delete: [VideoFileWhereUniqueInput!]
  connect: [VideoFileWhereUniqueInput!]
  set: [VideoFileWhereUniqueInput!]
  disconnect: [VideoFileWhereUniqueInput!]
  deleteMany: [VideoFileScalarWhereInput!]
  updateMany: [VideoFileUpdateManyWithWhereNestedInput!]
}

input VideoFileUpdateManyMutationInput {
  filetype: String
  filename: String
  visibility: Visibility
  quality: VideoQuality
  videoBurnedInStatus: VideoBurnedInStatus
  url: String
  signedUrl: String
  md5: String
  duration: Float
  bitrate: Float
  filesize: Float
}

input VideoFileUpdateManyWithWhereNestedInput {
  where: VideoFileScalarWhereInput!
  data: VideoFileUpdateManyDataInput!
}

input VideoFileUpdateWithWhereUniqueNestedInput {
  where: VideoFileWhereUniqueInput!
  data: VideoFileUpdateDataInput!
}

input VideoFileUpsertWithWhereUniqueNestedInput {
  where: VideoFileWhereUniqueInput!
  update: VideoFileUpdateDataInput!
  create: VideoFileCreateInput!
}

input VideoFileWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  language: LanguageWhereInput
  filetype: String
  filetype_not: String
  filetype_in: [String!]
  filetype_not_in: [String!]
  filetype_lt: String
  filetype_lte: String
  filetype_gt: String
  filetype_gte: String
  filetype_contains: String
  filetype_not_contains: String
  filetype_starts_with: String
  filetype_not_starts_with: String
  filetype_ends_with: String
  filetype_not_ends_with: String
  filename: String
  filename_not: String
  filename_in: [String!]
  filename_not_in: [String!]
  filename_lt: String
  filename_lte: String
  filename_gt: String
  filename_gte: String
  filename_contains: String
  filename_not_contains: String
  filename_starts_with: String
  filename_not_starts_with: String
  filename_ends_with: String
  filename_not_ends_with: String
  visibility: Visibility
  visibility_not: Visibility
  visibility_in: [Visibility!]
  visibility_not_in: [Visibility!]
  use: VideoUseWhereInput
  quality: VideoQuality
  quality_not: VideoQuality
  quality_in: [VideoQuality!]
  quality_not_in: [VideoQuality!]
  videoBurnedInStatus: VideoBurnedInStatus
  videoBurnedInStatus_not: VideoBurnedInStatus
  videoBurnedInStatus_in: [VideoBurnedInStatus!]
  videoBurnedInStatus_not_in: [VideoBurnedInStatus!]
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  signedUrl: String
  signedUrl_not: String
  signedUrl_in: [String!]
  signedUrl_not_in: [String!]
  signedUrl_lt: String
  signedUrl_lte: String
  signedUrl_gt: String
  signedUrl_gte: String
  signedUrl_contains: String
  signedUrl_not_contains: String
  signedUrl_starts_with: String
  signedUrl_not_starts_with: String
  signedUrl_ends_with: String
  signedUrl_not_ends_with: String
  md5: String
  md5_not: String
  md5_in: [String!]
  md5_not_in: [String!]
  md5_lt: String
  md5_lte: String
  md5_gt: String
  md5_gte: String
  md5_contains: String
  md5_not_contains: String
  md5_starts_with: String
  md5_not_starts_with: String
  md5_ends_with: String
  md5_not_ends_with: String
  duration: Float
  duration_not: Float
  duration_in: [Float!]
  duration_not_in: [Float!]
  duration_lt: Float
  duration_lte: Float
  duration_gt: Float
  duration_gte: Float
  bitrate: Float
  bitrate_not: Float
  bitrate_in: [Float!]
  bitrate_not_in: [Float!]
  bitrate_lt: Float
  bitrate_lte: Float
  bitrate_gt: Float
  bitrate_gte: Float
  filesize: Float
  filesize_not: Float
  filesize_in: [Float!]
  filesize_not_in: [Float!]
  filesize_lt: Float
  filesize_lte: Float
  filesize_gt: Float
  filesize_gte: Float
  dimensions: DimensionsWhereInput
  stream_every: VideoStreamWhereInput
  stream_some: VideoStreamWhereInput
  stream_none: VideoStreamWhereInput
  AND: [VideoFileWhereInput!]
  OR: [VideoFileWhereInput!]
  NOT: [VideoFileWhereInput!]
}

input VideoFileWhereUniqueInput {
  id: ID
}

type VideoProject {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  projectType: ProjectType!
  projectTitle: String!
  descPublic: String
  descInternal: String
  assetPath: String
  author: User
  team: Team
  status: PublishStatus
  visibility: Visibility
  units(where: VideoUnitWhereInput, orderBy: VideoUnitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VideoUnit!]
  supportFiles(where: SupportFileWhereInput, orderBy: SupportFileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SupportFile!]
  thumbnails(where: ImageFileWhereInput, orderBy: ImageFileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ImageFile!]
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category!]
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
}

type VideoProjectConnection {
  pageInfo: PageInfo!
  edges: [VideoProjectEdge]!
  aggregate: AggregateVideoProject!
}

input VideoProjectCreateInput {
  id: ID
  publishedAt: DateTime
  projectType: ProjectType
  projectTitle: String!
  descPublic: String
  descInternal: String
  assetPath: String
  author: UserCreateOneInput
  team: TeamCreateOneInput
  status: PublishStatus
  visibility: Visibility
  units: VideoUnitCreateManyInput
  supportFiles: SupportFileCreateManyInput
  thumbnails: ImageFileCreateManyInput
  categories: CategoryCreateManyInput
  tags: TagCreateManyInput
}

type VideoProjectEdge {
  node: VideoProject!
  cursor: String!
}

enum VideoProjectOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  projectType_ASC
  projectType_DESC
  projectTitle_ASC
  projectTitle_DESC
  descPublic_ASC
  descPublic_DESC
  descInternal_ASC
  descInternal_DESC
  assetPath_ASC
  assetPath_DESC
  status_ASC
  status_DESC
  visibility_ASC
  visibility_DESC
}

type VideoProjectPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  projectType: ProjectType!
  projectTitle: String!
  descPublic: String
  descInternal: String
  assetPath: String
  status: PublishStatus
  visibility: Visibility
}

type VideoProjectSubscriptionPayload {
  mutation: MutationType!
  node: VideoProject
  updatedFields: [String!]
  previousValues: VideoProjectPreviousValues
}

input VideoProjectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VideoProjectWhereInput
  AND: [VideoProjectSubscriptionWhereInput!]
  OR: [VideoProjectSubscriptionWhereInput!]
  NOT: [VideoProjectSubscriptionWhereInput!]
}

input VideoProjectUpdateInput {
  publishedAt: DateTime
  projectType: ProjectType
  projectTitle: String
  descPublic: String
  descInternal: String
  assetPath: String
  author: UserUpdateOneInput
  team: TeamUpdateOneInput
  status: PublishStatus
  visibility: Visibility
  units: VideoUnitUpdateManyInput
  supportFiles: SupportFileUpdateManyInput
  thumbnails: ImageFileUpdateManyInput
  categories: CategoryUpdateManyInput
  tags: TagUpdateManyInput
}

input VideoProjectUpdateManyMutationInput {
  publishedAt: DateTime
  projectType: ProjectType
  projectTitle: String
  descPublic: String
  descInternal: String
  assetPath: String
  status: PublishStatus
  visibility: Visibility
}

input VideoProjectWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  projectType: ProjectType
  projectType_not: ProjectType
  projectType_in: [ProjectType!]
  projectType_not_in: [ProjectType!]
  projectTitle: String
  projectTitle_not: String
  projectTitle_in: [String!]
  projectTitle_not_in: [String!]
  projectTitle_lt: String
  projectTitle_lte: String
  projectTitle_gt: String
  projectTitle_gte: String
  projectTitle_contains: String
  projectTitle_not_contains: String
  projectTitle_starts_with: String
  projectTitle_not_starts_with: String
  projectTitle_ends_with: String
  projectTitle_not_ends_with: String
  descPublic: String
  descPublic_not: String
  descPublic_in: [String!]
  descPublic_not_in: [String!]
  descPublic_lt: String
  descPublic_lte: String
  descPublic_gt: String
  descPublic_gte: String
  descPublic_contains: String
  descPublic_not_contains: String
  descPublic_starts_with: String
  descPublic_not_starts_with: String
  descPublic_ends_with: String
  descPublic_not_ends_with: String
  descInternal: String
  descInternal_not: String
  descInternal_in: [String!]
  descInternal_not_in: [String!]
  descInternal_lt: String
  descInternal_lte: String
  descInternal_gt: String
  descInternal_gte: String
  descInternal_contains: String
  descInternal_not_contains: String
  descInternal_starts_with: String
  descInternal_not_starts_with: String
  descInternal_ends_with: String
  descInternal_not_ends_with: String
  assetPath: String
  assetPath_not: String
  assetPath_in: [String!]
  assetPath_not_in: [String!]
  assetPath_lt: String
  assetPath_lte: String
  assetPath_gt: String
  assetPath_gte: String
  assetPath_contains: String
  assetPath_not_contains: String
  assetPath_starts_with: String
  assetPath_not_starts_with: String
  assetPath_ends_with: String
  assetPath_not_ends_with: String
  author: UserWhereInput
  team: TeamWhereInput
  status: PublishStatus
  status_not: PublishStatus
  status_in: [PublishStatus!]
  status_not_in: [PublishStatus!]
  visibility: Visibility
  visibility_not: Visibility
  visibility_in: [Visibility!]
  visibility_not_in: [Visibility!]
  units_every: VideoUnitWhereInput
  units_some: VideoUnitWhereInput
  units_none: VideoUnitWhereInput
  supportFiles_every: SupportFileWhereInput
  supportFiles_some: SupportFileWhereInput
  supportFiles_none: SupportFileWhereInput
  thumbnails_every: ImageFileWhereInput
  thumbnails_some: ImageFileWhereInput
  thumbnails_none: ImageFileWhereInput
  categories_every: CategoryWhereInput
  categories_some: CategoryWhereInput
  categories_none: CategoryWhereInput
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  AND: [VideoProjectWhereInput!]
  OR: [VideoProjectWhereInput!]
  NOT: [VideoProjectWhereInput!]
}

input VideoProjectWhereUniqueInput {
  id: ID
}

enum VideoQuality {
  WEB
  BROADCAST
}

type VideoStream {
  id: ID!
  site: String
  url: String
  embedUrl: String
}

type VideoStreamConnection {
  pageInfo: PageInfo!
  edges: [VideoStreamEdge]!
  aggregate: AggregateVideoStream!
}

input VideoStreamCreateInput {
  id: ID
  site: String
  url: String
  embedUrl: String
}

input VideoStreamCreateManyInput {
  create: [VideoStreamCreateInput!]
  connect: [VideoStreamWhereUniqueInput!]
}

type VideoStreamEdge {
  node: VideoStream!
  cursor: String!
}

enum VideoStreamOrderByInput {
  id_ASC
  id_DESC
  site_ASC
  site_DESC
  url_ASC
  url_DESC
  embedUrl_ASC
  embedUrl_DESC
}

type VideoStreamPreviousValues {
  id: ID!
  site: String
  url: String
  embedUrl: String
}

input VideoStreamScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  site: String
  site_not: String
  site_in: [String!]
  site_not_in: [String!]
  site_lt: String
  site_lte: String
  site_gt: String
  site_gte: String
  site_contains: String
  site_not_contains: String
  site_starts_with: String
  site_not_starts_with: String
  site_ends_with: String
  site_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  embedUrl: String
  embedUrl_not: String
  embedUrl_in: [String!]
  embedUrl_not_in: [String!]
  embedUrl_lt: String
  embedUrl_lte: String
  embedUrl_gt: String
  embedUrl_gte: String
  embedUrl_contains: String
  embedUrl_not_contains: String
  embedUrl_starts_with: String
  embedUrl_not_starts_with: String
  embedUrl_ends_with: String
  embedUrl_not_ends_with: String
  AND: [VideoStreamScalarWhereInput!]
  OR: [VideoStreamScalarWhereInput!]
  NOT: [VideoStreamScalarWhereInput!]
}

type VideoStreamSubscriptionPayload {
  mutation: MutationType!
  node: VideoStream
  updatedFields: [String!]
  previousValues: VideoStreamPreviousValues
}

input VideoStreamSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VideoStreamWhereInput
  AND: [VideoStreamSubscriptionWhereInput!]
  OR: [VideoStreamSubscriptionWhereInput!]
  NOT: [VideoStreamSubscriptionWhereInput!]
}

input VideoStreamUpdateDataInput {
  site: String
  url: String
  embedUrl: String
}

input VideoStreamUpdateInput {
  site: String
  url: String
  embedUrl: String
}

input VideoStreamUpdateManyDataInput {
  site: String
  url: String
  embedUrl: String
}

input VideoStreamUpdateManyInput {
  create: [VideoStreamCreateInput!]
  update: [VideoStreamUpdateWithWhereUniqueNestedInput!]
  upsert: [VideoStreamUpsertWithWhereUniqueNestedInput!]
  delete: [VideoStreamWhereUniqueInput!]
  connect: [VideoStreamWhereUniqueInput!]
  set: [VideoStreamWhereUniqueInput!]
  disconnect: [VideoStreamWhereUniqueInput!]
  deleteMany: [VideoStreamScalarWhereInput!]
  updateMany: [VideoStreamUpdateManyWithWhereNestedInput!]
}

input VideoStreamUpdateManyMutationInput {
  site: String
  url: String
  embedUrl: String
}

input VideoStreamUpdateManyWithWhereNestedInput {
  where: VideoStreamScalarWhereInput!
  data: VideoStreamUpdateManyDataInput!
}

input VideoStreamUpdateWithWhereUniqueNestedInput {
  where: VideoStreamWhereUniqueInput!
  data: VideoStreamUpdateDataInput!
}

input VideoStreamUpsertWithWhereUniqueNestedInput {
  where: VideoStreamWhereUniqueInput!
  update: VideoStreamUpdateDataInput!
  create: VideoStreamCreateInput!
}

input VideoStreamWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  site: String
  site_not: String
  site_in: [String!]
  site_not_in: [String!]
  site_lt: String
  site_lte: String
  site_gt: String
  site_gte: String
  site_contains: String
  site_not_contains: String
  site_starts_with: String
  site_not_starts_with: String
  site_ends_with: String
  site_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  embedUrl: String
  embedUrl_not: String
  embedUrl_in: [String!]
  embedUrl_not_in: [String!]
  embedUrl_lt: String
  embedUrl_lte: String
  embedUrl_gt: String
  embedUrl_gte: String
  embedUrl_contains: String
  embedUrl_not_contains: String
  embedUrl_starts_with: String
  embedUrl_not_starts_with: String
  embedUrl_ends_with: String
  embedUrl_not_ends_with: String
  AND: [VideoStreamWhereInput!]
  OR: [VideoStreamWhereInput!]
  NOT: [VideoStreamWhereInput!]
}

input VideoStreamWhereUniqueInput {
  id: ID
}

type VideoUnit {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  language: Language
  title: String!
  descPublic: String
  files(where: VideoFileWhereInput, orderBy: VideoFileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VideoFile!]
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category!]
  thumbnails(where: ThumbnailWhereInput, orderBy: ThumbnailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Thumbnail!]
}

type VideoUnitConnection {
  pageInfo: PageInfo!
  edges: [VideoUnitEdge]!
  aggregate: AggregateVideoUnit!
}

input VideoUnitCreateInput {
  id: ID
  language: LanguageCreateOneInput
  title: String!
  descPublic: String
  files: VideoFileCreateManyInput
  tags: TagCreateManyInput
  categories: CategoryCreateManyInput
  thumbnails: ThumbnailCreateManyInput
}

input VideoUnitCreateManyInput {
  create: [VideoUnitCreateInput!]
  connect: [VideoUnitWhereUniqueInput!]
}

type VideoUnitEdge {
  node: VideoUnit!
  cursor: String!
}

enum VideoUnitOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  descPublic_ASC
  descPublic_DESC
}

type VideoUnitPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  descPublic: String
}

input VideoUnitScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  descPublic: String
  descPublic_not: String
  descPublic_in: [String!]
  descPublic_not_in: [String!]
  descPublic_lt: String
  descPublic_lte: String
  descPublic_gt: String
  descPublic_gte: String
  descPublic_contains: String
  descPublic_not_contains: String
  descPublic_starts_with: String
  descPublic_not_starts_with: String
  descPublic_ends_with: String
  descPublic_not_ends_with: String
  AND: [VideoUnitScalarWhereInput!]
  OR: [VideoUnitScalarWhereInput!]
  NOT: [VideoUnitScalarWhereInput!]
}

type VideoUnitSubscriptionPayload {
  mutation: MutationType!
  node: VideoUnit
  updatedFields: [String!]
  previousValues: VideoUnitPreviousValues
}

input VideoUnitSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VideoUnitWhereInput
  AND: [VideoUnitSubscriptionWhereInput!]
  OR: [VideoUnitSubscriptionWhereInput!]
  NOT: [VideoUnitSubscriptionWhereInput!]
}

input VideoUnitUpdateDataInput {
  language: LanguageUpdateOneInput
  title: String
  descPublic: String
  files: VideoFileUpdateManyInput
  tags: TagUpdateManyInput
  categories: CategoryUpdateManyInput
  thumbnails: ThumbnailUpdateManyInput
}

input VideoUnitUpdateInput {
  language: LanguageUpdateOneInput
  title: String
  descPublic: String
  files: VideoFileUpdateManyInput
  tags: TagUpdateManyInput
  categories: CategoryUpdateManyInput
  thumbnails: ThumbnailUpdateManyInput
}

input VideoUnitUpdateManyDataInput {
  title: String
  descPublic: String
}

input VideoUnitUpdateManyInput {
  create: [VideoUnitCreateInput!]
  update: [VideoUnitUpdateWithWhereUniqueNestedInput!]
  upsert: [VideoUnitUpsertWithWhereUniqueNestedInput!]
  delete: [VideoUnitWhereUniqueInput!]
  connect: [VideoUnitWhereUniqueInput!]
  set: [VideoUnitWhereUniqueInput!]
  disconnect: [VideoUnitWhereUniqueInput!]
  deleteMany: [VideoUnitScalarWhereInput!]
  updateMany: [VideoUnitUpdateManyWithWhereNestedInput!]
}

input VideoUnitUpdateManyMutationInput {
  title: String
  descPublic: String
}

input VideoUnitUpdateManyWithWhereNestedInput {
  where: VideoUnitScalarWhereInput!
  data: VideoUnitUpdateManyDataInput!
}

input VideoUnitUpdateWithWhereUniqueNestedInput {
  where: VideoUnitWhereUniqueInput!
  data: VideoUnitUpdateDataInput!
}

input VideoUnitUpsertWithWhereUniqueNestedInput {
  where: VideoUnitWhereUniqueInput!
  update: VideoUnitUpdateDataInput!
  create: VideoUnitCreateInput!
}

input VideoUnitWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  language: LanguageWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  descPublic: String
  descPublic_not: String
  descPublic_in: [String!]
  descPublic_not_in: [String!]
  descPublic_lt: String
  descPublic_lte: String
  descPublic_gt: String
  descPublic_gte: String
  descPublic_contains: String
  descPublic_not_contains: String
  descPublic_starts_with: String
  descPublic_not_starts_with: String
  descPublic_ends_with: String
  descPublic_not_ends_with: String
  files_every: VideoFileWhereInput
  files_some: VideoFileWhereInput
  files_none: VideoFileWhereInput
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  categories_every: CategoryWhereInput
  categories_some: CategoryWhereInput
  categories_none: CategoryWhereInput
  thumbnails_every: ThumbnailWhereInput
  thumbnails_some: ThumbnailWhereInput
  thumbnails_none: ThumbnailWhereInput
  AND: [VideoUnitWhereInput!]
  OR: [VideoUnitWhereInput!]
  NOT: [VideoUnitWhereInput!]
}

input VideoUnitWhereUniqueInput {
  id: ID
}

type VideoUse {
  id: ID!
  name: String!
}

type VideoUseConnection {
  pageInfo: PageInfo!
  edges: [VideoUseEdge]!
  aggregate: AggregateVideoUse!
}

input VideoUseCreateInput {
  id: ID
  name: String!
}

input VideoUseCreateOneInput {
  create: VideoUseCreateInput
  connect: VideoUseWhereUniqueInput
}

type VideoUseEdge {
  node: VideoUse!
  cursor: String!
}

enum VideoUseOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type VideoUsePreviousValues {
  id: ID!
  name: String!
}

type VideoUseSubscriptionPayload {
  mutation: MutationType!
  node: VideoUse
  updatedFields: [String!]
  previousValues: VideoUsePreviousValues
}

input VideoUseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VideoUseWhereInput
  AND: [VideoUseSubscriptionWhereInput!]
  OR: [VideoUseSubscriptionWhereInput!]
  NOT: [VideoUseSubscriptionWhereInput!]
}

input VideoUseUpdateDataInput {
  name: String
}

input VideoUseUpdateInput {
  name: String
}

input VideoUseUpdateManyMutationInput {
  name: String
}

input VideoUseUpdateOneInput {
  create: VideoUseCreateInput
  update: VideoUseUpdateDataInput
  upsert: VideoUseUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: VideoUseWhereUniqueInput
}

input VideoUseUpsertNestedInput {
  update: VideoUseUpdateDataInput!
  create: VideoUseCreateInput!
}

input VideoUseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [VideoUseWhereInput!]
  OR: [VideoUseWhereInput!]
  NOT: [VideoUseWhereInput!]
}

input VideoUseWhereUniqueInput {
  id: ID
  name: String
}

enum Visibility {
  INTERNAL
  PUBLIC
}
